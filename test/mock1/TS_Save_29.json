{
  "SaveName": "Century Spice Road 1.0",
  "EpochTime": 1630350562,
  "Date": "8/30/2021 3:09:22 PM",
  "VersionNumber": "v13.1.1",
  "GameMode": "Century Spice Road",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "Table_Custom",
  "TableURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665543849/ADCD0620273EBA8E8B294D8DFF67B2672E015539/",
  "Sky": "Sky_Field",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "MusicPlayer": {
    "RepeatSong": false,
    "PlaylistEntry": -1,
    "CurrentAudioTitle": "Rise",
    "CurrentAudioURL": "http://cloud-3.steamusercontent.com/ugc/792007786635326362/6A3125CEEC6B418F8DF57708FA49E084E09F5319/",
    "AudioLibrary": [
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439252213/6A3125CEEC6B418F8DF57708FA49E084E09F5319/",
        "Item2": "Rise"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439253291/689D53AFEDD7CDDCFACCD5701ADBE5D4A289A02E/",
        "Item2": "Morning Dew"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439254624/004DB3EBA76CA9D13C4452BAC0486D892B825C9E/",
        "Item2": "Footpath"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439256135/BE1798553D823998DDE7C0F22905461A26A6F03B/",
        "Item2": "Moonlight Whisper"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439257221/0D4089C0364C577DAA4385059D18920C08482DAC/",
        "Item2": "The Golden Palace"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439258441/27A8F69BD80D4F09C1EED353A1F7670018E54747/",
        "Item2": "At The Market"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439259741/5CE75E65E75BD107E37A2225C49A92E97D5498A6/",
        "Item2": "Distant"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439261243/CD8722D1B7E341FB68EBB4453E7D2F570B618CF2/",
        "Item2": "The Stern Officer"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439262559/A41688F8BDCF4F793370F8DA4FB0B28E314299D7/",
        "Item2": "Playground"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439263711/39FC805950F9B20AA1E37D8DDABA0320B8F35C5E/",
        "Item2": "Waterfall"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439265127/09FBC9BB07885ABEB7F6FB53DE52FACADDA4CE5F/",
        "Item2": "Lotus"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439266228/7C05743AE9A7B371C261A55A408F014A2FC77B65/",
        "Item2": "The Fox On The Hill"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439267741/F27BD62D0342E78D5A9276AA73C6B459B7459071/",
        "Item2": "Paper Lantern"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/790867207439268809/9047CB447E039A8E5DC950F69FBF13D22665C553/",
        "Item2": "Tien Shan"
      }
    ]
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 2.0,
    "ySize": 2.0,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.236000016,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.09200144,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 0.840000153,
    "LutIndex": 0,
    "LutContribution": 1.0,
    "LutURL": ""
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": []
  },
  "Turns": {
    "Enable": false,
    "Type": 1,
    "TurnOrder": [
      "White",
      "Brown",
      "Red",
      "Orange",
      "Yellow",
      "Green",
      "Teal",
      "Blue",
      "Purple",
      "Pink"
    ],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "DecalPallet": [],
  "LuaScript": "---> #include Main\r\n---> #include Keys\r\nkeys = {\r\n    board = \"88e31a\",\r\n    pointCards = \"258d2e\",\r\n    actionCards = \"bebb58\",\r\n    playingIndicator = \"085f7b\",\r\n    centerText = \"3b67af\", -- last turn\r\n    startingCards = {\r\n        White = {\"5934a2\", \"0687b0\"},\r\n        Yellow = {\"938df7\", \"200c7b\"},\r\n        Red = {\"3676e6\", \"874bd4\"},\r\n        Green = {\"92e907\", \"7d960a\"},\r\n        Blue = {\"930e39\", \"4d5f89\"}\r\n    },\r\n    ribbons = {\r\n        \"7c01ea\",\r\n        \"3d4e4c\",\r\n        \"9660c3\"\r\n    },\r\n    bags = {\r\n        yellow = \"e4d921\",\r\n        red = \"11bb02\",\r\n        green = \"370bc9\",\r\n        brown = \"3d5ff9\"\r\n    },\r\n    coinBags = {\r\n        gold = \"d7c969\",\r\n        silver = \"b1b2e4\"\r\n    },\r\n    caravanCards = {\r\n        White = \"93feb2\",\r\n        Yellow = \"2559fe\",\r\n        Red = \"d79a0a\",\r\n        Green = \"f23594\",\r\n        Blue = \"983060\"\r\n    },\r\n    caravanCardZone = {\r\n        White = \"04534d\",\r\n        Yellow = \"495d87\",\r\n        Red = \"9a2684\",\r\n        Green = \"4f2bcc\",\r\n        Blue = \"66c6b5\"\r\n    },\r\n    actionCardsScriptingZone = {\r\n        \"29bf77\",\r\n        \"06d301\",\r\n        \"8f96f8\",\r\n        \"39ea07\",\r\n        \"686f38\",\r\n        \"976c99\"\r\n    },\r\n    pointCardsScriptingZone = {\r\n        \"04680d\",\r\n        \"3f454c\",\r\n        \"663dca\",\r\n        \"5ee922\",\r\n        \"c7d60b\"\r\n    },\r\n    scores = {\r\n        White = \"888a34\",\r\n        Yellow = \"b2b84d\",\r\n        Red = \"3420c7\",\r\n        Green = \"373281\",\r\n        Blue = \"a80557\"\r\n    },\r\n    names = {\r\n        White = \"fabd30\",\r\n        Yellow = \"4160f2\",\r\n        Red = \"0026c0\",\r\n        Green = \"516409\",\r\n        Blue = \"6fd878\"\r\n    },\r\n    labels = {\r\n        takeButton = \"Take\",\r\n        quickTakeButton = \"Pay & Take\"\r\n    }\r\n}\r\n\r\nnextCubeColor = {\r\n    yellow = \"red\",\r\n    red = \"green\",\r\n    green = \"brown\",\r\n    brown = \"brown\"\r\n}\r\n\r\nloc = {\r\n    coins = {\r\n        gold = {x = -6.47, y = 1.77, z = 22.24},\r\n        silver = {x = -1.30, y = 1.77, z = 22.24}\r\n    },\r\n    decks = {\r\n        pointCards = {x = 20.11, y = 1.94, z = 17.74},\r\n        actionCards = {x = 19.95, y = 1.97, z = 8.60}\r\n    }\r\n}\r\n\r\nbots = {\r\n    White = nil,\r\n    Yellow = nil,\r\n    Red = nil,\r\n    Green = nil,\r\n    Blue = nil,\r\n}\r\n\r\ngameModel = {\r\n    lastRound = false,\r\n    currentPlayer = \"White\",\r\n    state = \"not_started\", -- \"not_started\", \"ready\", \"paused\", \"taking_action_card\" \"discard\", \"game_over\", \"exchange\", \"promote\"\r\n    paidIndex = 0,\r\n    numPlayers = 0,\r\n    turns = {\"White\", \"Yellow\", \"Red\", \"Green\", \"Blue\"},\r\n    victoryCondition = 5,\r\n    nextPlayer = { -- keyed by player color, indicate next color\r\n        White = \"White\"\r\n    },\r\n    players = {\r\n        White  = {bot = false, dev = false, score = 0, actionCards = {keys.startingCards[\"White\"][1], keys.startingCards[\"White\"][2]}, pointCards = {}, coins = {}},\r\n        Yellow = {bot = false, dev = false, score = 0, actionCards = {keys.startingCards[\"Yellow\"][1], keys.startingCards[\"Yellow\"][2]}, pointCards = {}, coins = {}},\r\n        Red    = {bot = false, dev = false, score = 0, actionCards = {keys.startingCards[\"Red\"][1], keys.startingCards[\"Red\"][2]}, pointCards = {}, coins = {}},\r\n        Green  = {bot = false, dev = false, score = 0, actionCards = {keys.startingCards[\"Green\"][1], keys.startingCards[\"Green\"][2]}, pointCards = {}, coins = {}},\r\n        Blue   = {bot = false, dev = false, score = 0, actionCards = {keys.startingCards[\"Blue\"][1], keys.startingCards[\"Blue\"][2]}, pointCards = {}, coins = {}}\r\n    },\r\n    active = { -- information regarding the current card being played\r\n        action = \"\", -- {\"promote\", \"exchange\", \"collect\"}\r\n        guid = \"\",\r\n        value = \"\"\r\n    }\r\n}\r\n\r\n---< #include Keys\r\n---> #include UIcontrol\r\nfunction hideUI()\r\n    UI.setAttributes(\"pWelcome\", {active = \"false\"})\r\nend\r\n\r\nfunction hideWelcome()\r\n    UI.hide(\"pWelcome\")\r\nend\r\n\r\nfunction hideStartButton()\r\n    UI.hide(\"bStartGame\")\r\nend\r\n---< #include UIcontrol\r\n---> #include StartGame\r\n---> #include UIControl\r\nfunction hideUI()\r\n    UI.setAttributes(\"pWelcome\", {active = \"false\"})\r\nend\r\n\r\nfunction hideWelcome()\r\n    UI.hide(\"pWelcome\")\r\nend\r\n\r\nfunction hideStartButton()\r\n    UI.hide(\"bStartGame\")\r\nend\r\n---< #include UIControl\r\n---> #include Cards\r\n-- deal a single card from the deck of 'type'\r\n-- invoke 'callback when done'\r\n-- this will recurse index + 1 until all empty locations are filled\r\n-- type {\"actionCards\", \"pointCards\"}\r\nfunction dealNextCard(deckType, index, callback)\r\n   callback = callback or function() end\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local max = #keys[deckType];\r\n   local zone = getObjectFromGUID(keys[scriptingZoneName][index])\r\n\r\n   if zone == nil then\r\n       if callback ~= nil then callback() end\r\n       return\r\n   end\r\n\r\n   local parameters = {\r\n       position = zone.getPosition(),\r\n       flip = true,\r\n       index = 0,\r\n       callback_function = function(card)\r\n           Wait.time(function() card.setLock(true) end, 0.5)\r\n           nextIndex = index + 1;\r\n           dealNextCard(deckType, nextIndex, callback)\r\n       end\r\n   }\r\n\r\n   local deck = getObjectFromGUID(keys[deckType]);\r\n\r\n   local card = nil\r\n   if deck == nil then\r\n       card = getObjectAt(loc.decks[deckType], \"card\")\r\n       if card ~= nil then\r\n           card.flip()\r\n           card.setPosition(zone.getPosition(), false, false)\r\n           card.setLock(true)\r\n       end\r\n       Wait.time(callback, 0.5) -- moving cards left expects dealing to be done\r\n   else\r\n       card = deck.takeObject(parameters);\r\n   end\r\n\r\n   if card ~= nil then card.setVar(\"index\", index) end\r\nend\r\n\r\nfunction moveCardToHand(card, playerColor)\r\n   card.setLock(false);\r\n   local player = Player[playerColor];\r\n   local hand = player.getHandTransform(1);\r\n   card.setPositionSmooth(hand.position, false, true);\r\n   local rotation = hand.rotation\r\n   rotation.y = (rotation.y + 180) % 360\r\n   card.setRotation(rotation)\r\n   card.call(\"resetState\")\r\n   card.setVar(\"state\", \"ready\") -- bug quasher\r\nend\r\n\r\nfunction placeCardBesideCaravan(card, playerColor)\r\n    -- place the card beside the spice board\r\n    local hand = Player[playerColor].getHandTransform(1)\r\n    local playerCard = getObjectFromGUID(keys.caravanCards[playerColor]);\r\n\r\n    local d = 9;\r\n    local rPos = playerCard.getTransformRight();\r\n    local cPos = playerCard.getPosition();\r\n\r\n    local nPos = {\r\n        x = cPos.x - rPos.x * d,\r\n        y = cPos.y - rPos.y * d,\r\n        z = cPos.z - rPos.z * d\r\n    }\r\n\r\n    nPos.x = nPos.x + (#gameModel.players[playerColor].pointCards * 0.5)\r\n    nPos.z = nPos.z + (#gameModel.players[playerColor].pointCards * -0.5)\r\n\r\n    card.setPositionSmooth(nPos, false, false);\r\n    local rotation = hand.rotation\r\n    rotation.y = (rotation.y + 180) % 360\r\n    card.setRotation(rotation);\r\nend\r\n\r\nfunction sortActionCards(color, menuPos)\r\n    local caravanCard = getObjectFromGUID(keys.caravanCardZone[color])\r\n    local pos = caravanCard.getPosition();\r\n    pos.x = pos.x - 6\r\n    pos.z = pos.z - 7.1\r\n    pos.y = 1\r\n \r\n    local j = 1\r\n    for i,guid in ipairs(gameModel.players[color].actionCards) do\r\n        local obj = getObjectFromGUID(guid)\r\n        if isInHand(obj, color) == false then\r\n            obj.setRotation({x=0, y=180, z=0})\r\n            obj.setPosition(pos)\r\n            pos.x = pos.x + 2\r\n            pos.y = pos.y + 0.01\r\n            j = j + 1\r\n        end\r\n \r\n        if j > 10 then\r\n            j = 1\r\n            pos.z = pos.z - 6.1\r\n            pos.x = caravanCard.getPosition().x - 6\r\n        end\r\n    end\r\n end\r\n---< #include Cards\r\n---> #include Cubes\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n---> #include TakeCard\r\n-- handle paying for action cards\r\nfunction onCubeEnterScriptingZone(zone, cube)\r\n   if cube.getVar(\"owner\") ~= gameModel.currentPlayer then\r\n       return\r\n   end\r\n\r\n   function watch()\r\n       return cube.getVelocity().x == 0\r\n   end\r\n\r\n   function onCondition()\r\n       evaluateActionTakeButtons()\r\n       sortActionCubes(zone, cube)\r\n   end\r\n\r\n   Wait.condition(onCondition, watch, 3, onCondition)\r\nend\r\n\r\nfunction onCubeLeaveScriptingZone(zone, cube)\r\n    evaluateActionTakeButtons()\r\nend\r\n\r\nfunction sortActionCubes(zone, cube)\r\n   local pos = zone.getPosition()\r\n   local sca = zone.getScale()\r\n\r\n   local left = pos.x + 0.5 * sca.x\r\n   local top = pos.z + 0.5 * sca.z\r\n\r\n   local cubes = getObjectsByClass(zone, \"cube\")\r\n   table.insert(cubes, cube)\r\n\r\n   for i,o in ipairs(cubes) do\r\n       sz = o.getBounds().size\r\n       top = top - sz.z - 0.2\r\n       o.setPositionSmooth({left - sz.x, 2.3, top})\r\n   end\r\nend\r\n\r\nfunction removeActionCardButtons(cb)\r\n    cb = cb or function() end\r\n\r\n    for i, card in ipairs(getActionCards()) do\r\n        removeButtons(card, keys.labels.takeButton)\r\n    end\r\n\r\n    Wait.frames(cb, 2)\r\nend\r\n\r\n-- check all cards to ensure they have a cube owned by player\r\nfunction evaluateActionTakeButtons()\r\n    removeActionCardButtons(function()\r\n        local actionCards = getActionCards()\r\n        if #actionCards <= 1 then return end\r\n\r\n        if #actionCards >= 1 then\r\n            addTakeButton(actionCards[1], \"takeActionCard\")\r\n        end\r\n\r\n        local flagFound = true\r\n        for i = 1, #actionCards do\r\n            if flagFound == false then return end\r\n            flagFound = false\r\n\r\n            local zone = getObjectFromGUID(keys.actionCardsScriptingZone[i])\r\n            local cubes = getObjectsByClass(zone, \"cube\")\r\n            for j = 1, #cubes do\r\n                if cubes[j].getVar(\"owner\") == gameModel.currentPlayer then\r\n                    if (i < 6) then addTakeButton(actionCards[i + 1], \"takeActionCard\") end\r\n                    flagFound = true\r\n                end\r\n            end\r\n        end\r\n    end, 2)\r\nend\r\n\r\nfunction evaluatePointTakeButtons()\r\n    local function onDelay()\r\n        -- if the current player has the cubes to purchase a points card, add a button\r\n        for i, card in ipairs(getPointCards()) do\r\n            local cost = CubeCount:new(card.getTable(\"model\").cost)\r\n            local playerCubes = getPlayerCubes(gameModel.currentPlayer)\r\n\r\n            if gameModel.state ~= \"ready\" or playerCubes:has(cost) == false then\r\n                removeButtons(card, keys.labels.takeButton)\r\n            else\r\n                addTakeButton(card, \"takePointCard\");\r\n            end\r\n        end\r\n    end\r\n    Wait.frames(onDelay, 2)\r\nend\r\n\r\nfunction removeAllPointTakeButtons(cb)\r\n    cb = cb or function() end\r\n\r\n    for i, card in ipairs(getPointCards()) do\r\n        removeButtons(card, keys.labels.takeButton)\r\n    end\r\n\r\n    Wait.frames(cb, 2)\r\nend\r\n\r\nfunction checkCubeEnterScriptingZone(zone, cube)\r\n   if cube.getVar(\"owner\") == nil then return true end\r\n\r\n   if gameModel.state ~= \"ready\" then return false end\r\n\r\n   if isClass(cube, \"cube\") == false then return false end\r\n   if cube.getVar(\"owner\") ~= gameModel.currentPlayer then return false end;\r\n   if zone.getVar(\"index\") == gameModel.paidIndex + 1 then return true end\r\n   return false\r\nend\r\n\r\n-- remove ownership on all cubes on all buyable action cards\r\nfunction clearCubeOwners()\r\n    local actionCards = getActionCards()\r\n\r\n    for i = 1, #actionCards do\r\n        local cubes = getCubesOn(actionCards[i])\r\n        for j = 1, #cubes do\r\n            cubeSetOwner(cubes[j], nil)\r\n        end\r\n    end\r\nend\r\n\r\nfunction takeActionCard(card, playerColor)\r\n    if playerColor ~= gameModel.currentPlayer then return end\r\n    if gameModel.state ~= \"ready\" and gameModel.state ~= \"taking_action_card\" then return end\r\n    setState(\"taking_action_card\")\r\n    cb = cb or function() end\r\n\r\n    removeButtons(card, \"Take\")\r\n    clearCubeOwners()\r\n    card.setLock(false)\r\n\r\n    moveCardToHand(card, playerColor)\r\n    collectActionCubes(playerColor, card.getVar(\"index\"));\r\n    card.setVar(\"ready\", true)\r\n\r\n    local index = card.getVar(\"index\");\r\n    for i = index, #keys[\"actionCardsScriptingZone\"] - 1 do moveCardLeft(\"actionCards\", i+1) end\r\n    for i = index, #keys[\"actionCardsScriptingZone\"] - 1 do moveCubesLeft(i+1) end\r\n    dealNextCard(\"actionCards\", #keys[\"actionCardsScriptingZone\"], function() passTurn(playerColor) end);\r\n\r\n    card.setVar(\"owner\", playerColor)\r\n\r\n    --update game model\r\n    t = gameModel.players[playerColor].actionCards\r\n    table.insert(t, card.getGUID())\r\nend\r\n\r\nfunction takePointCard(card, playerColor)\r\n    if playerColor ~= gameModel.currentPlayer then return end\r\n    if gameModel.state ~= \"ready\" then return end\r\n\r\n    local index = card.getVar(\"index\");\r\n    local cost = CubeCount:new(card.getTable(\"model\").cost);\r\n    local cubes = getPlayerCubes(gameModel.currentPlayer)\r\n\r\n    if cubes:has(cost) then\r\n       cubes:subset(cost):destruct()\r\n    else\r\n       return\r\n    end\r\n\r\n    if card.getButtons() ~= nil then card.removeButton(0) end\r\n    card.setLock(false)\r\n    placeCardBesideCaravan(card, playerColor)\r\n\r\n    local value = card.getTable(\"model\").value\r\n    gameModel.players[playerColor].score = gameModel.players[playerColor].score + value\r\n\r\n    if index == 1 or index == 2 then\r\n       collectCoins(playerColor, index)\r\n    end\r\n\r\n    for i = index, #keys[\"pointCardsScriptingZone\"] - 1 do moveCardLeft(\"pointCards\", i+1) end\r\n    dealNextCard(\"pointCards\", #keys[\"pointCardsScriptingZone\"], function() passTurn(playerColor) end);\r\n\r\n    card.setVar(\"owner\", playerColor)\r\n    t = gameModel.players[playerColor].pointCards\r\n    table.insert(t, card.getGUID())\r\nend\r\n\r\nfunction addTakeButton(card, functionName)\r\n    if card == nil then return end\r\n    if hasButton(card, keys.labels.takeButton) then return end\r\n\r\n    parameters = {\r\n       click_function = functionName,\r\n       label = keys.labels.takeButton,\r\n       position = {0, 0.5, 1.65},\r\n       scale = {2.5, 1, 2},\r\n       width = 500,\r\n       height = 125,\r\n       font_size = 120,\r\n       color = {0.9, 0.1, 0.1}\r\n    }\r\n\r\n    card.createButton(parameters);\r\n    return card.getButtons()[1]\r\nend\r\n\r\n---< #include TakeCard\r\n---> #include CubeCollection\r\n-- class CubeCollection\r\n-- a list of cube objects\r\nCubeCollection = {}\r\nfunction CubeCollection:new(o)\r\n    if (type(o) == \"nil\") then o = {} end\r\n    if (type(o) != \"table\") then o = {o} end\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCollection:size()\r\n    return #self\r\nend\r\n\r\nfunction CubeCollection:isEmpty()\r\n    return #self == 0\r\nend\r\n\r\nfunction CubeCollection:getCube(color)\r\n    for i = 1,#self do\r\n        if isClass(self[i], color) then return self[i] end\r\n    end\r\n    return nil\r\nend\r\n\r\nfunction CubeCollection:getCubes(color)\r\n    local r = CubeCollection:new()\r\n    for i = 1,#self do\r\n        if isClass(self[i], color) then r:add(self[i]) end\r\n    end\r\n    return r\r\nend\r\n\r\nfunction CubeCollection:add(cube)\r\n    table.insert(self, cube)\r\nend\r\n\r\nfunction CubeCollection:has(cubeCount)\r\n    return self:count():has(cubeCount)\r\nend\r\n\r\n-- return a cubeCount object generated from this collection\r\nfunction CubeCollection:count()\r\n    local r = CubeCount:new()\r\n\r\n    for i = 1,#self do\r\n        if isClass(self[i], \"yellow\") then\r\n            r.yellow = r.yellow + 1;\r\n        elseif isClass(self[i], \"red\") then\r\n            r.red = r.red + 1;\r\n        elseif isClass(self[i], \"green\") then\r\n            r.green = r.green + 1;\r\n        elseif isClass(self[i], \"brown\") then\r\n            r.brown = r.brown + 1;\r\n        end\r\n    end\r\n\r\n    return r\r\nend\r\n\r\nfunction CubeCollection:sum()\r\n    return self:count():sum()\r\nend\r\n\r\n-- destruct all cubes in collection\r\n-- when complete call the cb function, passing in the count of cubes destructed\r\nfunction CubeCollection:destruct(cb)\r\n    cb = cb or function() end\r\n    local count = self:count()\r\n\r\n    for i = 1,#self do\r\n        self[i].destruct()\r\n    end\r\n\r\n    Wait.frames(function() cb(count) end, 1)\r\nend\r\n\r\n-- create a new collection of cubes based on cubeCount\r\nfunction CubeCollection:subset(cubeCount)\r\n    local rvalue = CubeCollection:new()\r\n\r\n    local yellow = 0\r\n    local red = 0\r\n    local green = 0\r\n    local brown = 0\r\n\r\n    for i = 1,#self do\r\n        local cube = self[i]\r\n        if isClass(cube, \"yellow\") and yellow < cubeCount.yellow then\r\n             yellow = yellow + 1;\r\n             rvalue:add(cube);\r\n        elseif isClass(cube, \"red\") and red < cubeCount.red then\r\n              red = red + 1;\r\n              rvalue:add(cube);\r\n        elseif isClass(cube, \"green\") and green < cubeCount.green then\r\n            green = green + 1;\r\n            rvalue:add(cube);\r\n        elseif isClass(cube, \"brown\") and brown < cubeCount.brown then\r\n            brown = brown + 1;\r\n            rvalue:add(cube);\r\n        end\r\n    end\r\n\r\n    return rvalue;\r\nend\r\n\r\n---< #include CubeCollection\r\n\r\n-- A Collection of Cube Utility Functions --\r\n--------------------------------------------\r\n\r\n-- obj: an object with snap points\r\n-- for all snappoints on 'obj',\r\n-- return all snappoints positions which do not have a nearby cube\r\nfunction getFreeSnapPoints(obj)\r\n    local freePoints = {};\r\n \r\n    for i, s in ipairs(obj.getSnapPoints()) do\r\n        local p = obj.positionToWorld(s.position)\r\n        if getObjectAt(p, \"cube\", 1) == nil then\r\n            freePoints[#freePoints + 1] = p\r\n        end\r\n    end\r\n \r\n    return freePoints;\r\n end\r\n\r\n-- return a cube collection of all cubes belonging to the indicated (color) player\r\n-- owner (optional): the player color to retrive, if nil retrieve current player\r\nfunction getPlayerCubes(owner)\r\n    owner = owner or gameModel.currentPlayer\r\n    local collection = CubeCollection:new()\r\n    local tab = getAllObjects()\r\n\r\n    for i = 1,#tab do\r\n        if isClass(tab[i], \"cube\") and tab[i].getVar(\"owner\") == owner then\r\n             collection:add(tab[i])\r\n        end\r\n    end\r\n    return collection\r\nend\r\n\r\nfunction sortCubes(color, cb)\r\n    cb = cb or function() end\r\n    local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n    local playerZone = getObjectFromGUID(keys.caravanCardZone[color])\r\n\r\n    local lastCube = nil -- used to wait for cb\r\n    local prevYpos = 2 -- gets set to the cube's y-position\r\n    local cubes = getPlayerCubes(color)\r\n\r\n    if cubes:isEmpty() then\r\n        cb()\r\n    end\r\n\r\n    local tempPos = playerCard.getPosition()\r\n    tempPos.z = tempPos.z - 5\r\n\r\n    for i,cube in ipairs(cubes) do\r\n        position = tempPos\r\n        prevYpos = position.y\r\n        position.y = prevYpos + 0.1\r\n        cube.setPosition(tempPos)\r\n        lastCube = cube\r\n    end\r\n\r\n    Wait.frames(function()\r\n        local free = getFreeSnapPoints(playerCard, playerZone)\r\n\r\n        -- add snappoints\r\n        local x = 0.7\r\n        for i = 1,5 do\r\n            position = playerCard.positionToWorld({x, 10.0, 0.5})\r\n            table.insert(free, position)\r\n            x = x - 0.4\r\n        end\r\n\r\n        local j = 1\r\n        local count = cubes:count()\r\n\r\n        function moveIfColor(cube, color)\r\n            if isClass(cube, color) then\r\n                free[j].y = prevYpos + 0.1\r\n                cube.setPositionSmooth(free[j])\r\n                cube.setRotation({0, 180, 180})\r\n                j = j + 1\r\n             end\r\n        end\r\n\r\n        for i,cube in ipairs(cubes) do moveIfColor(cube, \"yellow\") end\r\n        for i,cube in ipairs(cubes) do moveIfColor(cube, \"red\") end\r\n        for i,cube in ipairs(cubes) do moveIfColor(cube, \"green\") end\r\n        for i,cube in ipairs(cubes) do moveIfColor(cube, \"brown\") end\r\n    end, 1)\r\n\r\n    Wait.condition(cb, function() return lastCube.getPosition().y < 2 end)\r\nend\r\n\r\n-- get the selected cubes, if none are selected get the cubes under the mouse\r\nfunction cubesUnderMouse(color)\r\n    local selected = Player[color].getSelectedObjects()\r\n    if #selected == 0 then selected = {Player[color].getHoverObject()} end\r\n\r\n    local r = {}\r\n    for i,o in ipairs(selected) do\r\n        if isClass(o, \"cube\") and o.getVar(\"owner\") == color then\r\n            table.insert(r, o)\r\n        end\r\n    end\r\n\r\n    return r\r\nend\r\n\r\n-- move all action cubes from from index to playercolor\r\nfunction collectActionCubes(playerColor, index)\r\n    local cubes = {}\r\n    local zone = getObjectFromGUID(keys.actionCardsScriptingZone[index])\r\n\r\n    if zone.getObjects() == nil then return end\r\n\r\n    for i, obj in ipairs(zone.getObjects()) do\r\n        if isClass(obj, \"cube\") then\r\n            table.insert(cubes, obj)\r\n        end\r\n    end\r\n\r\n    moveCubesToPlayerCard(playerColor, cubes)\r\nend\r\n\r\nfunction getActionCubes(index)\r\n    local cubes = CubeCollection:new()\r\n\r\n    local zone = getObjectFromGUID(keys.actionCardsScriptingZone[index]);\r\n    for i, obj in ipairs(zone.getObjects()) do\r\n        if isClass(obj, \"cube\") then\r\n            cubes:add(obj)\r\n        end\r\n    end\r\n\r\n    return cubes\r\nend\r\n\r\nfunction getCubeColor(cube)\r\n   if isClass(cube, \"yellow\") then return \"yellow\" end\r\n   if isClass(cube, \"red\") then return \"red\" end\r\n   if isClass(cube, \"green\") then return \"green\" end\r\n   if isClass(cube, \"brown\") then return \"brown\" end\r\nend\r\n\r\n-- move all cube objects from cubes:table to the player card of the provided color\r\nfunction moveCubesToPlayerCard(playerColor, cubes)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[playerColor])\r\n   local playerZone = getObjectFromGUID(keys.caravanCardZone[playerColor])\r\n   local free = getFreeSnapPoints(playerCard, playerZone)\r\n\r\n   -- add 5 random snappoints\r\n   for i = 1,5 do\r\n       local x = 1 - math.random() * 2\r\n       position = playerCard.positionToWorld({x, 10.0, 0.5})\r\n       table.insert(free, position)\r\n   end\r\n\r\n   for i, cube in ipairs(cubes) do\r\n       if cube ~= nil then\r\n           cubeSetOwner(cube, playerColor)\r\n           local position = nil;\r\n           if #free > 0 then\r\n               position = table.remove(free, 1)\r\n               position.y = 10.0;\r\n           else\r\n               local x = 1 - math.random() * 2\r\n               position = playerCard.positionToWorld({x, 10.0, 0.5})\r\n           end\r\n\r\n           cube.setPosition(position, false, false)\r\n           position.y = position.y - 0.1\r\n           cube.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\nfunction cubeSetOwner(cube, playerColor)\r\n    cube.setVar(\"owner\", playerColor)\r\n    if playerColor == nil then\r\n        cube.setDescription(\"No Owner\")\r\n        cube.setDescription(\"No Owner\")\r\n    else\r\n        cube.setDescription(\"Owner: \" .. playerColor)\r\n    end\r\n     evaluatePointTakeButtons()\r\nend\r\n\r\n-- owner: the color of the player to give the cubes to\r\n-- cubeCount: an object of type CubeCount\r\n-- cb: callback function to call when all cubes are distributed\r\nfunction addCubesToPlayerCard(owner, cubeCount, cb)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[owner])\r\n   local playerZone = getObjectFromGUID(keys.caravanCardZone[owner])\r\n   local free = getFreeSnapPoints(playerCard, playerZone)\r\n\r\n   -- add 5 random snappoints\r\n   for i = 1,5 do\r\n       local x = 1 - math.random() * 2\r\n       position = playerCard.positionToWorld({x, 10.0, 0.5})\r\n       table.insert(free, position)\r\n   end\r\n\r\n   local newCubes = {}\r\n   local sum = cubeCount:sum()\r\n\r\n   local j = 1\r\n   for color, count in pairs(cubeCount) do\r\n       for i = 1,count do\r\n           if sum > 1 then\r\n               newCubes[#newCubes + 1] = giveCubeToPlayer(color, owner, free[j], nil);\r\n           else\r\n               newCubes[#newCubes + 1] = giveCubeToPlayer(color, owner, free[j], cb);\r\n           end\r\n           j = j + 1\r\n           sum = sum - 1\r\n       end\r\n   end\r\n\r\n   return newCubes\r\nend\r\n\r\n-- all new cubes come from this function\r\n-- return: new cube\r\nfunction giveCubeToPlayer(cubeColor, playerColor, position, cb)\r\n   cb = cb or function() end\r\n   position.y = 10.0\r\n\r\n   local bag = getObjectFromGUID(keys.bags[cubeColor]);\r\n   local cube = bag.takeObject({position = position, index = 0, smooth = false});\r\n   cubeSetOwner(cube, playerColor)\r\n\r\n   Wait.condition(cb, function()\r\n       if cube == nil then return true end\r\n       return cube.getPosition().y < 2\r\n   end)\r\n\r\n   return cube\r\nend\r\n\r\n\r\n-- get a collection of cubes on top of this object\r\n-- obj: the object in question\r\n-- distance: distance multiplier\r\nfunction getCubesOn(obj, distance)\r\n   distance = distance or 1\r\n\r\n   local bounds = obj.getBounds()\r\n   local pos = bounds.center\r\n   local scale = bounds.size\r\n\r\n   scale.x = scale.x * distance\r\n   scale.y = 2\r\n   scale.z = scale.z * distance\r\n   pos.y = 2\r\n\r\n   local tab = {\r\n       origin = pos,\r\n       direction = {0, 1, 0},\r\n       type = 3,\r\n       size = scale,\r\n       max_distance = 0\r\n   }\r\n   local hit = Physics.cast(tab)\r\n\r\n   local r = CubeCollection:new()\r\n\r\n   for i,o in ipairs(hit) do\r\n       if isClass(o.hit_object, \"cube\") then\r\n           r:add(o.hit_object)\r\n       end\r\n   end\r\n\r\n   return r\r\nend\r\n\r\n---< #include Cubes\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n---> #include Coins\r\nfunction getGoldCoin()\r\n   return getObjectAt(loc.coins.gold, \"coin\")\r\nend\r\n\r\n-- retrieve the object in the silver coin position\r\n-- not necessarily a gold coin\r\nfunction getSilverCoin()\r\n   return getObjectAt(loc.coins.silver, \"coin\")\r\nend\r\n\r\nfunction collectCoins(playerColor, index, cb)\r\n   local coin = nil\r\n   if index == 1 then coin = getGoldCoin()\r\n   else coin = getSilverCoin() end\r\n\r\n   if coin == nil then return end\r\n\r\n   -- place the coin beside the spice board\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[playerColor]);\r\n   local d = 12;\r\n   local rPos = playerCard.getTransformRight();\r\n   local cPos = playerCard.getPosition();\r\n   local nPos = {\r\n       x = cPos.x - rPos.x * d,\r\n       y = (cPos.y - rPos.y * d) + 5,\r\n       z = cPos.z - rPos.z * d\r\n   }\r\n   coin.setPositionSmooth(nPos, false, false);\r\n\r\n   table.insert(gameModel.players[playerColor].coins, coin.getGUID())\r\n\r\n   coin.setVar(\"owner\", playerColor)\r\n   local value = coin.getVar(\"value\")\r\n   gameModel.players[playerColor].score = gameModel.players[playerColor].score + value\r\n\r\n   Wait.frames(function()\r\n        refillCoins(index)\r\n        if cb then cb() end\r\n   end, 10)\r\nend\r\n\r\nfunction refillCoins(index, cb)\r\n   local goldBag = getObjectFromGUID(keys.coinBags.gold)\r\n   local silverBag = getObjectFromGUID(keys.coinBags.silver)\r\n   local goldCoin = getGoldCoin()\r\n   local silverCoin = getSilverCoin()\r\n\r\n   if index == 1 then\r\n       if #goldBag.getObjects() > 0 then\r\n           local param = {position = loc.coins.gold, index = 0}\r\n           if cb ~= nil then param.callback_function = cb end\r\n           goldBag.takeObject(param)\r\n       elseif moveSilverCoin() == false and #silverBag.getObjects() > 0 then\r\n           local param = {position = loc.coins.gold, index = 0}\r\n           if cb ~= nil then param.callback_function = cb end\r\n           silverBag.takeObject(param)\r\n       end\r\n   elseif index == 2 then\r\n       if #silverBag.getObjects() <= 0 then return end\r\n       if getObjectAt(loc.coins.gold, \"coin\") == nil then return end\r\n       if isClass(getObjectAt(loc.coins.gold, \"coin\"), \"silver\") then return end\r\n\r\n       local param = {position = loc.coins.silver, index = 0}\r\n       if cb ~= nil then param.callback_function = cb end\r\n       silverBag.takeObject(param)\r\n   end\r\nend\r\n\r\n-- move the silver coin left, if it exists\r\nfunction moveSilverCoin()\r\n   local silverCoin = getObjectAt(loc.coins.silver, \"coin\")\r\n   if silverCoin == nil then return false end\r\n   silverCoin.setPositionSmooth(loc.coins.gold)\r\n   return true\r\nend\r\n\r\n---< #include Coins\r\n---> #include GameState\r\n\r\nfunction setState(state)\r\n    if gameModel.state == state then return end\r\n    gameModel.state = state\r\n\r\n    log(\"setState: \" .. state)\r\n\r\n    if state == \"ready\" then\r\n        evaluatePointTakeButtons()\r\n        evaluateActionTakeButtons()\r\n    else\r\n        removeAllPointTakeButtons()\r\n        removeActionCardButtons()\r\n    end\r\nend\r\n\r\nfunction startTurn(color)\r\n   log(\"Start Turn: \" .. color)\r\n   if gameModel.state == \"game_over\" then\r\n       return\r\n   end\r\n\r\n   color = color or gameModel.currentPlayer -- debug to restart turn\r\n\r\n   gameModel.currentPlayer = color\r\n   setState(\"ready\")\r\n   local message = color .. \" Player's Turn \"\r\n   broadcastToAll(message, color)\r\n   movePlayingIndicator(color)\r\n   gameModel.paidIndex = 0\r\n\r\n   evaluatePointTakeButtons()\r\n   evaluateActionTakeButtons()\r\n   incrementDebugPlayer()\r\n\r\n   function watch()\r\n       return getObjectFromGUID(keys.playingIndicator).getVelocity().x == 0\r\n   end\r\n\r\n   Wait.time(function() Wait.condition(idle, watch, 3, idle) end, 0.25)\r\nend\r\n\r\nfunction endTurnCleanup()\r\n    setState(\"paused\")\r\n\r\n    tallyScore(gameModel.currentPlayer)\r\n    removeAllPointTakeButtons()\r\n    removeActionCardButtons()\r\n    clearCubeOwners()\r\n\r\n    -- check for end game condition\r\n    if #gameModel.players[gameModel.currentPlayer].pointCards >= gameModel.victoryCondition then\r\n       gameModel.lastRound = true;\r\n    end\r\n\r\n    if gameModel.lastRound then\r\n       local lastPlayer = gameModel.turns[gameModel.numPlayers]\r\n       if gameModel.currentPlayer == lastPlayer then\r\n           broadcastToAll(\"game over\")\r\n           setState(\"game_over\")\r\n           distributeRibbons()\r\n       else\r\n           showLastTurn()\r\n           broadcastToAll(\"last turn\")\r\n       end\r\n    end\r\nend\r\n\r\n-- shows the last turn notification\r\nfunction showLastTurn()\r\n    local text = getObjectFromGUID(keys.centerText)\r\n    local pos = text.getPosition()\r\n\r\n    pos.y = 2.0;\r\n    text.setScale({2, 1.5, 1.5})\r\n    text.setPosition(pos)\r\n\r\n    Wait.time(function() showLastTurnStep(1) end, 0.25)\r\nend\r\n\r\nfunction showLastTurnStep(i)\r\n    local text = getObjectFromGUID(keys.centerText)\r\n    local scale = text.getScale()\r\n    local pos = text.getPosition()\r\n    local rot = text.getPosition()\r\n\r\n    if i <= 10 then\r\n        scale.x = scale.x + 0.1\r\n        pos.y = pos.y + 1\r\n        text.setScale(scale)\r\n        text.setPosition(pos)\r\n        Wait.time(function() showLastTurnStep(i + 1) end, 0.03)\r\n    elseif i <= 20 then\r\n        if i % 2 == 1 then rot.y = 5\r\n        else rot.y = -5 end\r\n        rot.x = 90\r\n        text.setRotation(rot)\r\n        Wait.time(function() showLastTurnStep(i + 1) end, 0.07)\r\n    elseif i <= 30 then\r\n        scale.x = scale.x - 0.1\r\n        pos.y = pos.y - 1\r\n        text.setRotation({x = 90, y = 0, z = 0})\r\n        text.setScale(scale)\r\n        text.setPosition(pos)\r\n        Wait.time(function() showLastTurnStep(i + 1) end, 0.03)\r\n    end\r\nend\r\n\r\n-- put ribbons in front of winning players\r\nfunction distributeRibbons()\r\n    local scores = {}\r\n    for i = 1,gameModel.numPlayers do\r\n        table.insert(scores, 1, {color = gameModel.turns[i], score = tallyScore(gameModel.turns[i])})\r\n    end\r\n\r\n    for i = 1,gameModel.numPlayers do\r\n        for j = 1,(gameModel.numPlayers - 1) do\r\n            if scores[j].score < scores[j+1].score then\r\n                local temp = scores[j+1]\r\n                scores[j+1] = scores[j]\r\n                scores[j] = temp\r\n            end\r\n        end\r\n    end\r\n\r\n    for i,score in ipairs(scores) do\r\n        if (i <= 3) then\r\n            local caravan = getObjectFromGUID(keys.caravanCards[score.color])\r\n            local ribbon = getObjectFromGUID(keys.ribbons[i])\r\n            local pos = caravan.getPosition()\r\n            pos.y = 3\r\n            ribbon.setPosition(pos)\r\n\r\n            local rot = caravan.getRotation()\r\n            rot.x = 20\r\n            ribbon.setRotation(rot)\r\n\r\n        end\r\n    end\r\nend\r\n\r\n---< #include GameState\r\n\r\nDEBUG_PLAYER_COUNT = 3\r\n\r\n-- Setup the board to start playing the game.\r\n-- UI button calls this function\r\nfunction startGame(a, b)\r\n    -- if a.host == false then\r\n    --     broadcastToAll(\"Only the host can start the game\")\r\n    --     return\r\n    -- end\r\n\r\n    gameModel.numPlayers = #Player.getPlayers()\r\n    if gameModel.numPlayers == 1 then gameModel.numPlayers = DEBUG_PLAYER_COUNT end -- debug mode\r\n\r\n    hideStartButton()\r\n    clearExtraPieces()\r\n    removeUnplayedColors();\r\n    setupTurns(gameModel.numPlayers)\r\n    assignPlayers() -- randomize the player colors\r\n    determineVictoryCondition();\r\n    dealCubes()\r\n    hideUI()\r\n    setupCoins()\r\n    dealCards(\"pointCards\", nil);\r\n    dealCards(\"actionCards\", function() startTurn(gameModel.currentPlayer) end);\r\nend\r\n\r\nfunction removeUnplayedColors()\r\n    local newTurns = {}\r\n    for i = 1, gameModel.numPlayers do\r\n        newTurns[#newTurns + 1] = gameModel.turns[i]\r\n    end\r\n    gameModel.turns = newTurns;\r\nend\r\n\r\nfunction determineVictoryCondition()\r\n    if gameModel.numPlayers > 3 then\r\n        gameModel.victoryCondition = 5\r\n    else\r\n        gameModel.victoryCondition = 6\r\n    end    \r\nend\r\n\r\nfunction dealCubes()\r\n    local cubeCount = CubeCount:new()\r\n    cubeCount.yellow = 3\r\n\r\n    for i = 1, gameModel.numPlayers do\r\n        if i == 2 then\r\n            cubeCount.yellow = 4\r\n        elseif i == 4 then\r\n            cubeCount.red = 1\r\n        end\r\n\r\n        local owner = gameModel.turns[i]\r\n        addCubesToPlayerCard(owner, cubeCount, nil)\r\n\r\n    end\r\nend\r\n\r\nfunction setupCoins()\r\n    local goldBag = getObjectFromGUID(keys.coinBags.gold)\r\n    local silverBag = getObjectFromGUID(keys.coinBags.silver)\r\n\r\n    local n = (5 - gameModel.numPlayers) * 2\r\n\r\n    for i = 1,n do\r\n        goldBag.takeObject().destruct()\r\n        silverBag.takeObject().destruct()\r\n    end\r\n\r\n    refillCoins(1, function() refillCoins(2) end)\r\nend\r\n\r\n-- start dealing from position 1\r\n-- only use for first propagate the board\r\n-- type {\"actionCards\", \"pointCards\"}\r\n-- callback, function to call when all cards are dealt\r\nfunction dealCards(deckType, callback)\r\n    callback = callback or function() end\r\n    getObjectFromGUID(keys[deckType]).randomize();\r\n    dealNextCard(deckType, 1, callback)\r\n end\r\n\r\n function clearExtraPieces()\r\n    for i = gameModel.numPlayers + 1, #gameModel.turns do\r\n        local color = gameModel.turns[i]\r\n\r\n        local zone = getObjectFromGUID(keys.caravanCardZone[color])\r\n        if (zone == nil) then return end -- assume it and all associated objects are already destroyed\r\n\r\n        local objects = getObjectFromGUID(keys.caravanCardZone[color]).getObjects()\r\n        for i,o in ipairs(objects) do o.destruct() end\r\n\r\n        getObjectFromGUID(keys.caravanCards[color]).destruct()\r\n        getObjectFromGUID(keys.caravanCardZone[color]).destruct()\r\n        getObjectFromGUID(keys.scores[color]).destruct()\r\n        getObjectFromGUID(keys.names[color]).destruct()\r\n\r\n        for i,card in ipairs(Player[color].getHandObjects()) do\r\n            card.destruct();\r\n        end\r\n    end\r\nend\r\n\r\n-- randomize player positions\r\nfunction assignPlayers()\r\n    local players = Player.getPlayers()\r\n\r\n    for i = 1, #players do\r\n        local player = Player.getPlayers()[i]\r\n        player.changeColor(\"Grey\")\r\n    end\r\n\r\n    local availableColors = {}\r\n    for i = 1, #gameModel.turns do\r\n        availableColors[i] = gameModel.turns[i]\r\n    end\r\n\r\n    -- assign player colors\r\n    while #Player.getSpectators() > 0 do\r\n        local r = math.random(1, #Player.getSpectators())\r\n        local player = Player.getSpectators()[r]\r\n\r\n        local q = math.random(1, #availableColors)\r\n        local color = table.remove(availableColors, q)\r\n        player.changeColor(color)\r\n    end\r\n\r\n    for i,player in ipairs(Player.getPlayers()) do\r\n        local name = getObjectFromGUID(keys.names[player.color])\r\n        name.setValue(player.steam_name)\r\n    end\r\nend\r\n\r\n-- setup the turn order for 'n' participants\r\nfunction setupTurns(n)\r\n    local last = gameModel.turns[n]\r\n    for i = 1,n do\r\n        gameModel.nextPlayer[last] = gameModel.turns[i]\r\n        last = gameModel.turns[i]\r\n    end\r\nend\r\n---< #include StartGame\r\n---> #include OnLoad\r\nlog(\"onLoad.lua\")\r\n--[[ The onLoad event is called after the game save finishes loading. --]]\r\nfunction onLoad(saved_data)\r\n    log(\"onLoad\")\r\n    getObjectFromGUID(keys.playingIndicator).registerCollisions()\r\n\r\n    setupZones()\r\n    setupCaravanCards()\r\n    addHotkey(\"quickAction\", quickAction)\r\n\r\n    addClass(getObjectFromGUID(keys.bags.yellow), \"cubeBag\")\r\n    addClass(getObjectFromGUID(keys.bags.red), \"cubeBag\")\r\n    addClass(getObjectFromGUID(keys.bags.green), \"cubeBag\")\r\n    addClass(getObjectFromGUID(keys.bags.brown), \"cubeBag\")\r\n\r\n    if saved_data ~= \"\" and saved_data ~= nil then\r\n        local loaded_data = JSON.decode(saved_data)\r\n        if loaded_data.state ~= \"not_started\" then\r\n            gameModel = loaded_data\r\n            hideStartButton();\r\n            loadSavedData()\r\n        end\r\n    end\r\n\r\n    getObjectFromGUID(keys.coinBags.gold).interactable = false\r\n    getObjectFromGUID(keys.coinBags.silver).interactable = false\r\n    if getObjectFromGUID(keys.actionCards) then getObjectFromGUID(keys.actionCards).interactable = false end\r\n    getObjectFromGUID(keys.pointCards).interactable = false\r\n\r\n    replaceCubes()\r\n    claimOwners()\r\nend\r\n\r\nfunction claimOwners()\r\n    for i = 1,#gameModel.turns do        \r\n        local color = gameModel.turns[i]\r\n        local handObjects = getPlayableCards(color)   \r\n        for index, handObject in ipairs(handObjects) do\r\n            handObject.setVar(\"owner\", color)\r\n        end\r\n    end\r\nend\r\n\r\nfunction loadSavedData()\r\n    addTakeButton(getActionCards()[1], \"takeActionCard\")\r\n\r\n    for i = 2, gameModel.paidIndex + 1 do\r\n        addTakeButton(getActionCards()[i], \"takeActionCard\")\r\n    end\r\n\r\n    for i = 1, gameModel.numPlayers do\r\n        local color = gameModel.turns[i]\r\n        tallyScore(color)\r\n        if gameModel.players[color].bot == true then\r\n            initBot(color)\r\n        end\r\n    end\r\n\r\n    evaluatePointTakeButtons()\r\n    evaluateActionTakeButtons()\r\n    incrementDebugPlayer()\r\nend\r\n\r\n-- replace all cubes with newly generated cubes\r\n-- cubes that were loaded can not be disposed of in the bags\r\nfunction replaceCubes()\r\n    for i = 1,#gameModel.turns do\r\n        local color = gameModel.turns[i]\r\n        getPlayerCubes(color):destruct(function(count) addCubesToPlayerCard(color, count) end)\r\n    end\r\nend\r\n\r\nfunction setupCaravanCards()\r\n    for color,key in pairs(keys.caravanCards) do\r\n        local caravanCard = getObjectFromGUID(key)\r\n        if caravanCard ~= nil then\r\n            caravanCard.setVar(\"owner\", color)\r\n            setupRestButton(color)\r\n            caravanCard.addContextMenuItem(\"Sort Cubes\", function(a, b) sortCubes(a) end)\r\n            caravanCard.addContextMenuItem(\"Sort Action Cards\", sortActionCards)\r\n\r\n            -- enable card collision for cube debug placement\r\n            caravanCard.registerCollisions()\r\n        end\r\n    end\r\nend\r\n\r\nfunction setupRestButton(color)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n\r\n   parameters = {\r\n       click_function = \"rest\",\r\n       label = \"R\",\r\n       position = {0.8, 1.0, 0.9},\r\n       scale = {1, 1, 1},\r\n       width = 200,\r\n       height = 300,\r\n       font_size = 150,\r\n       color = {1, 1, 1},\r\n       tooltip = \"Rest and/or\\nPickup Cards\"\r\n   }\r\n\r\n   playerCard.createButton(parameters)\r\nend\r\n\r\nfunction setupZones()\r\n    for i,key in ipairs(keys.actionCardsScriptingZone) do\r\n        getObjectFromGUID(key).setVar(\"index\", i)\r\n        getObjectFromGUID(key).setVar(\"modelClass\", \"zone actionCards\")\r\n    end\r\n\r\n    for i,key in ipairs(keys.pointCardsScriptingZone) do\r\n        getObjectFromGUID(key).setVar(\"index\", i)\r\n        getObjectFromGUID(key).setVar(\"modelClass\", \"zone pointsCards\")\r\n    end\r\n\r\n    for c,key in pairs(keys.caravanCardZone) do\r\n        local zone = getObjectFromGUID(key)\r\n        if zone ~= nil then\r\n            addClass(zone, \"caravan\")\r\n            zone.setVar(\"owner\", c)\r\n            for i,o in ipairs(getObjectsByClass(zone, \"cube\")) do\r\n                cubeSetOwner(o, c)\r\n            end\r\n        end\r\n    end\r\nend\r\n\r\nfunction onSave()\r\n    return JSON.encode(gameModel)\r\nend\r\n---< #include OnLoad\r\n\r\n---< #include Main\r\n\r\n",
  "LuaScriptState": "{\"active\":{\"action\":\"\",\"guid\":\"\",\"value\":\"\"},\"currentPlayer\":\"White\",\"lastRound\":false,\"nextPlayer\":{\"White\":\"White\"},\"numPlayers\":0,\"paidIndex\":0,\"players\":{\"Blue\":{\"actionCards\":[\"930e39\",\"4d5f89\"],\"bot\":false,\"coins\":[],\"dev\":false,\"pointCards\":[],\"score\":0},\"Green\":{\"actionCards\":[\"92e907\",\"7d960a\"],\"bot\":false,\"coins\":[],\"dev\":false,\"pointCards\":[],\"score\":0},\"Red\":{\"actionCards\":[\"3676e6\",\"874bd4\"],\"bot\":false,\"coins\":[],\"dev\":false,\"pointCards\":[],\"score\":0},\"White\":{\"actionCards\":[\"5934a2\",\"0687b0\"],\"bot\":false,\"coins\":[],\"dev\":false,\"pointCards\":[],\"score\":0},\"Yellow\":{\"actionCards\":[\"938df7\",\"200c7b\"],\"bot\":false,\"coins\":[],\"dev\":false,\"pointCards\":[],\"score\":0}},\"state\":\"not_started\",\"turns\":[\"White\",\"Yellow\",\"Red\",\"Green\",\"Blue\"],\"victoryCondition\":5}",
  "XmlUI": "<!-- <Panel\r\n    id=\"pWelcome\"\r\n    height=\"0\"\r\n    width=\"0\"\r\n    color=\"rgba(0,0,0,0.99)\"\r\n    rectAlignment=\"UpperCenter\"\r\n    offsetXY=\"0 -80\"\r\n    hideAnimation=\"FadeOut\"\r\n    animationDuration=\"0.5\"\r\n    returnToOriginalPositionWhenReleased=\"false\"\r\n    allowDragging=\"true\"\r\n>\r\n\r\n    <Button\r\n        onClick=\"hideWelcome\"\r\n        height=\"0\"\r\n        width=\"0\"\r\n        color=\"rgba(0,0,0,0.7)\"\r\n        text=\"X\"\r\n        textColor=\"rgba(1,1,1,0.9)\"\r\n        fontStyle=\"Bold\"\r\n        fontSize=\"60\"\r\n        rectAlignment=\"UpperRight\"\r\n        >\r\n    </Button>\r\n\r\n    <Text alignment=\"upperLeft\" offsetXY=\"30 -30\" fontsize=\"40\" color=\"#ffffff\">\r\n        Welcome to Spice Road\r\n    </Text>\r\n\r\n    <Text alignment=\"upperLeft\" offsetXY=\"30 -80\" fontsize=\"20\" color=\"#ffffff\">\r\n        To play a card, drag it from your hand and drop it on the table.\r\n        Collect cards will automatically collect.  Promote and Exchange cards can have cubes dropped onto\r\n        it to promote them, or you can use the right-click context menu.  When you can no longer make\r\n        any actions the turn will pass to the next player.\r\n\r\n        In the options menu, under game keys, you can select a quick action key\r\n        Don't forget to unbind the key under menu : configuration : controls.\r\n\r\n        You can press the 'R' (rest) button on your caravan card to indicate that that you are\r\n        done your turn.  This will also pick up your cards if it is your only action.\r\n\r\n        To discard cubes, drag and drop them on the cube bag area.\r\n\r\n        Right clicking will give you options to organize your cubes and/or cards as well as providing\r\n        a quick action when available.\r\n    </Text>\r\n\r\n    <Button\r\n        id=\"bStartGame\"\r\n        width=\"0\"\r\n        height=\"0\"\r\n        offsetXY=\"0 -190\"\r\n        fontsize=\"25\"\r\n        onClick=\"startGame\">\r\n        Start Game\r\n    </Button>\r\n\r\n    <Button offsetXY=\"100 -100\" height=\"30\" width=\"30\" id=\"bBotsMinus\" onClick=\"botsMinus\">-</Button>\r\n    <Text id=\"tBotCount\" offsetXY=\"-60 -100\" fontsize=\"50\" color=\"#ffffff\">\r\n        0 Bots\r\n    </Text>\r\n    <Button offsetXY=\"130 -100\" height=\"30\" width=\"30\"  id=\"bBotsPlus\"  onClick=\"botsPlus\">+</Button\r\n</Panel> -->\r\n\r\n<Button\r\n    id=\"bStartGame\"\r\n    width=\"100\"\r\n    height=\"50\"\r\n    offsetXY=\"0 -190\"\r\n    fontsize=\"25\"\r\n    onClick=\"startGame\">\r\n    Start Game\r\n</Button>",
  "ObjectStates": [
    {
      "GUID": "e6db0c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 17.0,
        "posY": 3.29337835,
        "posZ": 34.4527626,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3322973,
        "scaleY": 11.8970528,
        "scaleZ": 6.352832
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "da148c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -17.0,
        "posY": 3.29337835,
        "posZ": 34.43159,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3268747,
        "scaleY": 11.8970528,
        "scaleZ": 6.35014534
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "11e48f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -33.0,
        "posY": 3.29337835,
        "posZ": -34.42515,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3268948,
        "scaleY": 11.8970528,
        "scaleZ": 6.35014534
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "17e728",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 33.0,
        "posY": 4.00000048,
        "posZ": -33.9999962,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.7800007,
        "scaleY": 12.9675283,
        "scaleZ": 7.8216
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "63d695",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 0.0,
        "posY": 3.29337835,
        "posZ": -34.42515,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 15.3268919,
        "scaleY": 11.8970528,
        "scaleZ": 6.35014534
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "88e31a",
      "Name": "Custom_Board",
      "Transform": {
        "posX": 1.99293436E-06,
        "posY": 1.01379156,
        "posZ": 13.555418,
        "rotX": -9.03821444E-07,
        "rotY": 180.0,
        "rotZ": 2.1771956E-07,
        "scaleX": 0.8,
        "scaleY": 0.8,
        "scaleZ": 0.8
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.7867647,
        "g": 0.7867647,
        "b": 0.7867647
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664950903/1893E80A7760180C19D20E6214DCA37AC6B52315/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 2.29135466
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.4449428,
            "y": 0.592243731,
            "z": -6.78667068
          }
        },
        {
          "Position": {
            "x": 2.20718646,
            "y": 0.592243731,
            "z": -6.824734
          }
        }
      ]
    },
    {
      "GUID": "2559fe",
      "Name": "Card",
      "Transform": {
        "posX": 1.51829663E-05,
        "posY": 0.9734373,
        "posZ": -9.0,
        "rotX": 0.0006889362,
        "rotY": 180.0,
        "rotZ": -0.00177675346,
        "scaleX": 2.8,
        "scaleY": 1.0,
        "scaleZ": 2.8
      },
      "Nickname": "playerCard Yellow",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 604,
      "SidewaysCard": false,
      "CustomDeck": {
        "6": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665087756/16AF9288F785FCCF973D380B9416093BBFE4F164/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665090573/3862BC35B0DC8CD996A888A55B33280223D069EC/",
          "NumWidth": 2,
          "NumHeight": 3,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "modelClass = \"caravan\"\r\nowner = \"Yellow\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.7153612,
            "y": 0.209306434,
            "z": -0.8986256
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": 0.337083668,
            "y": 0.209306389,
            "z": -0.8986264
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.0141807664,
            "y": 0.209306359,
            "z": -0.898626149
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.3708693,
            "y": 0.209306315,
            "z": -0.911751866
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.755151749,
            "y": 0.209306225,
            "z": -0.9380563
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": 0.7278833,
            "y": 0.2093065,
            "z": -0.232155159
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": 0.353578836,
            "y": 0.209306419,
            "z": -0.244680047
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.010647119,
            "y": 0.209306389,
            "z": -0.244680464
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.3749257,
            "y": 0.209306329,
            "z": -0.2697516
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        },
        {
          "Position": {
            "x": -0.7707678,
            "y": 0.209306315,
            "z": -0.244680613
          },
          "Rotation": {
            "x": -1.92257062E-06,
            "y": -8.817914E-16,
            "z": 5.255768E-08
          }
        }
      ]
    },
    {
      "GUID": "d79a0a",
      "Name": "Card",
      "Transform": {
        "posX": -35.25,
        "posY": 0.973481536,
        "posZ": -9.0,
        "rotX": 0.000565362338,
        "rotY": 180.00061,
        "rotZ": -0.001342218,
        "scaleX": 2.8,
        "scaleY": 1.0,
        "scaleZ": 2.8
      },
      "Nickname": "playerCard Red",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 603,
      "SidewaysCard": false,
      "CustomDeck": {
        "6": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665087756/16AF9288F785FCCF973D380B9416093BBFE4F164/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665090573/3862BC35B0DC8CD996A888A55B33280223D069EC/",
          "NumWidth": 2,
          "NumHeight": 3,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "modelClass = \"caravan\"\r\nowner = \"Red\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.7339695,
            "y": 0.209305972,
            "z": -0.94712466
          }
        },
        {
          "Position": {
            "x": 0.361364484,
            "y": 0.20930624,
            "z": -0.9526162
          }
        },
        {
          "Position": {
            "x": -0.001429231,
            "y": 0.209305912,
            "z": -0.93025136
          }
        },
        {
          "Position": {
            "x": -0.376615375,
            "y": 0.209306523,
            "z": -0.9355928
          }
        },
        {
          "Position": {
            "x": -0.7445643,
            "y": 0.2093064,
            "z": -0.9356907
          }
        },
        {
          "Position": {
            "x": 0.7323505,
            "y": 0.2093061,
            "z": -0.277615458
          }
        },
        {
          "Position": {
            "x": 0.370763481,
            "y": 0.20930621,
            "z": -0.260981828
          }
        },
        {
          "Position": {
            "x": -0.000731407141,
            "y": 0.209305838,
            "z": -0.2720152
          }
        },
        {
          "Position": {
            "x": -0.374524742,
            "y": 0.209306017,
            "z": -0.260286838
          }
        },
        {
          "Position": {
            "x": -0.741403341,
            "y": 0.209306419,
            "z": -0.271619827
          }
        }
      ]
    },
    {
      "GUID": "93feb2",
      "Name": "Card",
      "Transform": {
        "posX": 35.0,
        "posY": 1.0,
        "posZ": -9.0,
        "rotX": 1.87704448E-08,
        "rotY": 180.0,
        "rotZ": -6.9923E-08,
        "scaleX": 2.8,
        "scaleY": 1.0,
        "scaleZ": 2.8
      },
      "Nickname": "playerCard White",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 600,
      "SidewaysCard": false,
      "CustomDeck": {
        "6": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665087756/16AF9288F785FCCF973D380B9416093BBFE4F164/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665090573/3862BC35B0DC8CD996A888A55B33280223D069EC/",
          "NumWidth": 2,
          "NumHeight": 3,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "\r\nmodelClass = \"caravan\"\r\nowner = \"White\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.7264153,
            "y": 0.209305838,
            "z": -0.917214453
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": 0.3436585,
            "y": 0.209305838,
            "z": -0.930055559
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.0281353742,
            "y": 0.209305823,
            "z": -0.9172868
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.400126219,
            "y": 0.209305808,
            "z": -0.942941248
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.760491967,
            "y": 0.209305808,
            "z": -0.9301622
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": 0.7216216,
            "y": 0.209305838,
            "z": -0.278527677
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": 0.3637242,
            "y": 0.209305838,
            "z": -0.290816367
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.02753412,
            "y": 0.209305838,
            "z": -0.278600216
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.379753917,
            "y": 0.209305823,
            "z": -0.254154861
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        },
        {
          "Position": {
            "x": -0.7601636,
            "y": 0.209305823,
            "z": -0.278671145
          },
          "Rotation": {
            "x": -2.11871356E-08,
            "y": -0.002349585,
            "z": 1.17718555E-08
          }
        }
      ]
    },
    {
      "GUID": "3d5ff9",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -13.7592039,
        "posY": 1.73785925,
        "posZ": 20.9979019,
        "rotX": 0.0131763592,
        "rotY": 1.81174016,
        "rotZ": -0.0044366396,
        "scaleX": 2.0,
        "scaleY": 2.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "modelClass = \"bag brown\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "f8d280",
          "Name": "BlockSquare",
          "Transform": {
            "posX": -13.7227068,
            "posY": 4.856611,
            "posZ": 6.31138372,
            "rotX": 2.66157842,
            "rotY": 179.970078,
            "rotZ": 0.529587,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "brown cube",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.3257835,
            "g": 0.141697347,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"cube brown\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "370bc9",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -17.0121689,
        "posY": 1.73786628,
        "posZ": 17.2827854,
        "rotX": 359.986938,
        "rotY": 2.05883431,
        "rotZ": 0.004178351,
        "scaleX": 2.0,
        "scaleY": 2.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "modelClass = \"bag green\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "20583b",
          "Name": "BlockSquare",
          "Transform": {
            "posX": -16.52503,
            "posY": 4.83325529,
            "posZ": 2.55875373,
            "rotX": 0.8505977,
            "rotY": 164.8726,
            "rotZ": 180.492264,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "green cube",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.106504,
            "g": 0.520905733,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"cube green\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "11bb02",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -19.2204552,
        "posY": 1.73786283,
        "posZ": 13.1725121,
        "rotX": -5.6933136E-06,
        "rotY": 0.0003624109,
        "rotZ": -5.81336451E-07,
        "scaleX": 2.0,
        "scaleY": 2.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "modelClass = \"bag red\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b0abb6",
          "Name": "BlockSquare",
          "Transform": {
            "posX": -18.6488781,
            "posY": 4.69708347,
            "posZ": -1.31653714,
            "rotX": 358.019958,
            "rotY": 254.786011,
            "rotZ": 271.820068,
            "scaleX": 0.9,
            "scaleY": 0.9,
            "scaleZ": 0.9
          },
          "Nickname": "red cube",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.750871,
            "g": 0.0,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"cube red\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "e4d921",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -20.1590023,
        "posY": 1.73786247,
        "posZ": 7.93802929,
        "rotX": -4.834723E-06,
        "rotY": 0.000346617831,
        "rotZ": -6.07636252E-07,
        "scaleX": 2.0,
        "scaleY": 2.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "modelClass = \"bag yellow\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "70d3ae",
          "Name": "BlockSquare",
          "Transform": {
            "posX": -20.5644455,
            "posY": 4.863564,
            "posZ": -5.51528454,
            "rotX": 0.379269838,
            "rotY": 15.008441,
            "rotZ": 182.671432,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "yellow cube",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.881041,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "\r\nmodelClass = \"cube yellow\"\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b1b2e4",
      "Name": "Bag",
      "Transform": {
        "posX": -18.72523,
        "posY": 1.58664846,
        "posZ": 21.3984184,
        "rotX": 1.92465832E-05,
        "rotY": 0.000453066983,
        "rotZ": 2.65644621E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.520905733,
        "g": 0.520905733,
        "b": 0.520905733
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Bag": {
        "Order": 0
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "6bbd9a",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.4608364,
            "posY": 3.90205431,
            "posZ": 7.22063,
            "rotX": 2.349306,
            "rotY": 89.90512,
            "rotZ": 175.3742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "5645c8",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.4608364,
            "posY": 3.90205431,
            "posZ": 7.22063,
            "rotX": 2.349306,
            "rotY": 89.90512,
            "rotZ": 175.3742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "1335ce",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.4608364,
            "posY": 3.90205431,
            "posZ": 7.22063,
            "rotX": 2.349306,
            "rotY": 89.90512,
            "rotZ": 175.3742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "0a4083",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.4608364,
            "posY": 3.90205431,
            "posZ": 7.22063,
            "rotX": 2.349306,
            "rotY": 89.90512,
            "rotZ": 175.3742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "6280e0",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.4608364,
            "posY": 3.90205431,
            "posZ": 7.22063,
            "rotX": 2.349306,
            "rotY": 89.90512,
            "rotZ": 175.3742,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "5035ed",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.17356,
            "posY": 3.81917644,
            "posZ": 7.703996,
            "rotX": 359.722351,
            "rotY": 0.0106742075,
            "rotZ": 355.783478,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "f7454b",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.1690273,
            "posY": 3.80975437,
            "posZ": 7.632881,
            "rotX": 359.0839,
            "rotY": 0.0384253524,
            "rotZ": 355.2531,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "fac351",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.1690273,
            "posY": 3.80975437,
            "posZ": 7.632881,
            "rotX": 359.0839,
            "rotY": 0.0384253524,
            "rotZ": 355.2531,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "8cd95c",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.1690273,
            "posY": 3.80975437,
            "posZ": 7.632881,
            "rotX": 359.0839,
            "rotY": 0.0384253524,
            "rotZ": 355.2531,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "7398f4",
          "Name": "Quarter",
          "Transform": {
            "posX": -18.261797,
            "posY": 3.83364582,
            "posZ": 7.08626842,
            "rotX": 358.09082,
            "rotY": 0.0230031237,
            "rotZ": 358.6467,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "silver coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin silver\"\r\nvalue = 1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        }
      ]
    },
    {
      "GUID": "d7c969",
      "Name": "Bag",
      "Transform": {
        "posX": -21.6395721,
        "posY": 1.5861311,
        "posZ": 18.0009346,
        "rotX": 1.02561648E-06,
        "rotY": 0.0006323928,
        "rotZ": -1.587485E-05,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.8587356,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Bag": {
        "Order": 0
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "927af1",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.4386349,
            "posY": 3.92559242,
            "posZ": 4.004916,
            "rotX": 3.577854,
            "rotY": 190.7331,
            "rotZ": 183.423981,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "17a0ed",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.4386349,
            "posY": 3.92559242,
            "posZ": 4.004916,
            "rotX": 3.577854,
            "rotY": 190.7331,
            "rotZ": 183.423981,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "bf541b",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.4386349,
            "posY": 3.92559242,
            "posZ": 4.004916,
            "rotX": 3.577854,
            "rotY": 190.7331,
            "rotZ": 183.423981,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "acffc7",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.4386349,
            "posY": 3.92559242,
            "posZ": 4.004916,
            "rotX": 3.577854,
            "rotY": 190.7331,
            "rotZ": 183.423981,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "2bf805",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.4386349,
            "posY": 3.92559242,
            "posZ": 4.004916,
            "rotX": 3.577854,
            "rotY": 190.7331,
            "rotZ": 183.423981,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "2d3bf7",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.0888233,
            "posY": 3.916034,
            "posZ": 3.787651,
            "rotX": 1.50109887,
            "rotY": 195.697388,
            "rotZ": 182.822037,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "2cb284",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.0888233,
            "posY": 3.916034,
            "posZ": 3.787651,
            "rotX": 1.50109887,
            "rotY": 195.697388,
            "rotZ": 182.822037,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "e68f07",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.0888233,
            "posY": 3.916034,
            "posZ": 3.787651,
            "rotX": 1.50109887,
            "rotY": 195.697388,
            "rotZ": 182.822037,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "3fa93e",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.0888233,
            "posY": 3.916034,
            "posZ": 3.787651,
            "rotX": 1.50109887,
            "rotY": 195.697388,
            "rotZ": 182.822037,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        },
        {
          "GUID": "8bcf0a",
          "Name": "Quarter",
          "Transform": {
            "posX": -21.3677979,
            "posY": 3.88575625,
            "posZ": 3.255961,
            "rotX": 1.76346433,
            "rotY": 194.80954,
            "rotZ": 181.428055,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "gold coin",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 0.7417841,
            "b": 0.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "LuaScript": "modelClass = \"coin gold\"\r\nvalue = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "RotationValues": [
            {
              "Value": "Heads",
              "Rotation": {
                "x": 0.0,
                "y": 90.0,
                "z": 180.0
              }
            },
            {
              "Value": "Tails",
              "Rotation": {
                "x": 0.0,
                "y": -90.0,
                "z": 0.0
              }
            }
          ]
        }
      ]
    },
    {
      "GUID": "9a2684",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -35.25,
        "posY": 4.0,
        "posZ": -9.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 13.94415,
        "scaleY": 6.0,
        "scaleZ": 8.169362
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "04534d",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 35.0,
        "posY": 4.0,
        "posZ": -9.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 13.6679916,
        "scaleY": 6.0,
        "scaleZ": 8.229895
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "495d87",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 0.0,
        "posY": 4.0,
        "posZ": -9.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 13.67,
        "scaleY": 6.0,
        "scaleZ": 8.23
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "29bf77",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -11.8695326,
        "posY": 2.22,
        "posZ": 8.831963,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "06d301",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -6.55,
        "posY": 2.22,
        "posZ": 8.83,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "8f96f8",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -1.28,
        "posY": 2.22,
        "posZ": 8.83,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "39ea07",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 3.9,
        "posY": 2.22,
        "posZ": 8.83,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "686f38",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 9.18,
        "posY": 2.22,
        "posZ": 8.83,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "976c99",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 14.57,
        "posY": 2.22,
        "posZ": 8.83,
        "rotX": 0.0,
        "rotY": 1.00179122E-05,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 2.5,
        "scaleZ": 7.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3420c7",
      "Name": "3DText",
      "Transform": {
        "posX": -40.8443336,
        "posY": 0.987221,
        "posZ": -11.00011,
        "rotX": 90.0,
        "rotY": -2.947798E-10,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "0",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 96
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b2b84d",
      "Name": "3DText",
      "Transform": {
        "posX": -5.673687,
        "posY": 0.986844838,
        "posZ": -11.0000734,
        "rotX": 90.0,
        "rotY": -2.947798E-10,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "0",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 84
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "888a34",
      "Name": "3DText",
      "Transform": {
        "posX": 29.45085,
        "posY": 1.01361549,
        "posZ": -11.0000935,
        "rotX": 90.0,
        "rotY": 4.225374E-06,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "0",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 84
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "04680d",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -6.472395,
        "posY": 2.22,
        "posZ": 17.8493633,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 3.736045,
        "scaleY": 1.0,
        "scaleZ": 6.66628
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3f454c",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -1.34335268,
        "posY": 2.22,
        "posZ": 17.85,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 3.63837123,
        "scaleY": 1.0,
        "scaleZ": 6.593024
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "663dca",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 3.87114334,
        "posY": 2.22,
        "posZ": 17.85,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 3.76046348,
        "scaleY": 1.0,
        "scaleZ": 6.66628075
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5ee922",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 9.099942,
        "posY": 2.22,
        "posZ": 17.85,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 3.90697622,
        "scaleY": 1.0,
        "scaleZ": 6.88604736
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "c7d60b",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 14.4602871,
        "posY": 2.22,
        "posZ": 17.85,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 3.882559,
        "scaleY": 1.0,
        "scaleZ": 6.886046
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "085f7b",
      "Name": "PlayerPawn",
      "Transform": {
        "posX": -0.2898664,
        "posY": 0.966324,
        "posZ": -0.06840311,
        "rotX": -1.37723168E-06,
        "rotY": 89.99543,
        "rotZ": -5.09324536E-07,
        "scaleX": 3.44999743,
        "scaleY": 3.44999743,
        "scaleZ": 3.44999743
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 0,
      "LuaScript": "modelClass = \"pawn\"\r\n\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f23594",
      "Name": "Card",
      "Transform": {
        "posX": -35.2624,
        "posY": 0.9734423,
        "posZ": 19.0,
        "rotX": 0.0006865845,
        "rotY": 180.0,
        "rotZ": -0.00173412694,
        "scaleX": 2.8,
        "scaleY": 1.0,
        "scaleZ": 2.8
      },
      "Nickname": "playerCard Red",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 603,
      "SidewaysCard": false,
      "CustomDeck": {
        "6": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665087756/16AF9288F785FCCF973D380B9416093BBFE4F164/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665090573/3862BC35B0DC8CD996A888A55B33280223D069EC/",
          "NumWidth": 2,
          "NumHeight": 3,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.733105,
            "y": 0.209306151,
            "z": -0.9621788
          }
        },
        {
          "Position": {
            "x": 0.3511677,
            "y": 0.209306285,
            "z": -0.9343371
          }
        },
        {
          "Position": {
            "x": -0.0189638473,
            "y": 0.209305957,
            "z": -0.9065743
          }
        },
        {
          "Position": {
            "x": -0.391282171,
            "y": 0.20930621,
            "z": -0.9250696
          }
        },
        {
          "Position": {
            "x": -0.760479331,
            "y": 0.209306359,
            "z": -0.925059438
          }
        },
        {
          "Position": {
            "x": 0.739403844,
            "y": 0.209305808,
            "z": -0.275583833
          }
        },
        {
          "Position": {
            "x": 0.3590561,
            "y": 0.209305689,
            "z": -0.2931717
          }
        },
        {
          "Position": {
            "x": -0.00479044253,
            "y": 0.209305719,
            "z": -0.284361869
          }
        },
        {
          "Position": {
            "x": -0.3863154,
            "y": 0.2093064,
            "z": -0.266767353
          }
        },
        {
          "Position": {
            "x": -0.7601877,
            "y": 0.209305838,
            "z": -0.249192551
          }
        }
      ]
    },
    {
      "GUID": "983060",
      "Name": "Card",
      "Transform": {
        "posX": 35.0,
        "posY": 0.9736048,
        "posZ": 19.0,
        "rotX": -4.58972465E-07,
        "rotY": 180.000015,
        "rotZ": -6.370742E-07,
        "scaleX": 2.8,
        "scaleY": 1.0,
        "scaleZ": 2.8
      },
      "Nickname": "playerCard Red",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 603,
      "SidewaysCard": false,
      "CustomDeck": {
        "6": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665087756/16AF9288F785FCCF973D380B9416093BBFE4F164/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209665090573/3862BC35B0DC8CD996A888A55B33280223D069EC/",
          "NumWidth": 2,
          "NumHeight": 3,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 0.73059,
            "y": 0.209306076,
            "z": -0.943986356
          }
        },
        {
          "Position": {
            "x": 0.372269869,
            "y": 0.209306583,
            "z": -0.939746261
          }
        },
        {
          "Position": {
            "x": -0.00310943276,
            "y": 0.209306166,
            "z": -0.9356021
          }
        },
        {
          "Position": {
            "x": -0.378476,
            "y": 0.209305719,
            "z": -0.93149066
          }
        },
        {
          "Position": {
            "x": -0.7452921,
            "y": 0.209306225,
            "z": -0.9540911
          }
        },
        {
          "Position": {
            "x": 0.735460341,
            "y": 0.209305838,
            "z": -0.2872788
          }
        },
        {
          "Position": {
            "x": 0.357240617,
            "y": 0.209306329,
            "z": -0.276472628
          }
        },
        {
          "Position": {
            "x": -0.015284691,
            "y": 0.209305912,
            "z": -0.279022634
          }
        },
        {
          "Position": {
            "x": -0.3821419,
            "y": 0.209306419,
            "z": -0.27484718
          }
        },
        {
          "Position": {
            "x": -0.743289351,
            "y": 0.209306,
            "z": -0.277333826
          }
        }
      ]
    },
    {
      "GUID": "4f2bcc",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": -35.15407,
        "posY": 4.0,
        "posZ": 18.8687077,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 13.8147669,
        "scaleY": 5.1,
        "scaleZ": 8.091776
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "66c6b5",
      "Name": "ScriptingTrigger",
      "Transform": {
        "posX": 35.0,
        "posY": 4.0,
        "posZ": 19.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 13.9929276,
        "scaleY": 5.1,
        "scaleZ": 7.93061256
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.509803951
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "373281",
      "Name": "3DText",
      "Transform": {
        "posX": -40.9117241,
        "posY": 0.986894846,
        "posZ": 16.8514156,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "0",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 84
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "a80557",
      "Name": "3DText",
      "Transform": {
        "posX": 29.38523,
        "posY": 0.986921966,
        "posZ": 18.032074,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "0",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 84
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "fabd30",
      "Name": "3DText",
      "Transform": {
        "posX": 35.0010033,
        "posY": 0.96113795,
        "posZ": -3.0000298,
        "rotX": 90.0,
        "rotY": -2.947798E-10,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Player 1\n",
        "colorstate": {
          "r": 1.0,
          "g": 1.0,
          "b": 1.0
        },
        "fontSize": 112
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4160f2",
      "Name": "3DText",
      "Transform": {
        "posX": -0.330245972,
        "posY": 0.96113807,
        "posZ": -3.00003338,
        "rotX": 90.0,
        "rotY": 0.666399062,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Player 2",
        "colorstate": {
          "r": 0.9425086,
          "g": 0.91569984,
          "b": 0.0410500243
        },
        "fontSize": 112
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "0026c0",
      "Name": "3DText",
      "Transform": {
        "posX": -35.24964,
        "posY": 0.9600027,
        "posZ": -3.00002551,
        "rotX": 90.0,
        "rotY": 0.499792963,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Player 3",
        "colorstate": {
          "r": 0.9634146,
          "g": 0.048674237,
          "b": 0.048674237
        },
        "fontSize": 112
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "516409",
      "Name": "3DText",
      "Transform": {
        "posX": -35.90123,
        "posY": 0.9611184,
        "posZ": 25.0001411,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Player 4",
        "colorstate": {
          "r": 0.07112822,
          "g": 0.9494773,
          "b": 0.126637161
        },
        "fontSize": 112
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "6fd878",
      "Name": "3DText",
      "Transform": {
        "posX": 35.8066673,
        "posY": 0.9611179,
        "posZ": 25.0001583,
        "rotX": 90.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Player 5",
        "colorstate": {
          "r": 0.277781576,
          "g": 0.117686875,
          "b": 0.9006969
        },
        "fontSize": 112
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7c01ea",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.55688667,
        "posY": 0.0,
        "posZ": 12.3730078,
        "rotX": 353.063354,
        "rotY": 179.98996,
        "rotZ": 0.000797775749,
        "scaleX": 2.0,
        "scaleY": 1.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1491208730051010571/0ED37AE07E936AA4C169CF3FD1C7C60E832E6497/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.2,
          "MergeDistancePixels": 15.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3d4e4c",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 1.48283422,
        "posY": 0.0,
        "posZ": 12.7780762,
        "rotX": 353.4311,
        "rotY": 180.0084,
        "rotZ": -0.000681416655,
        "scaleX": 2.0,
        "scaleY": 1.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1491208730051014288/DB1B2CDE4D55F2F53647661E2A2533E12C52334D/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.2,
          "MergeDistancePixels": 15.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9660c3",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 8.359469,
        "posY": 0.0,
        "posZ": 12.8971767,
        "rotX": 353.559967,
        "rotY": 180.008,
        "rotZ": -0.0006058141,
        "scaleX": 2.0,
        "scaleY": 1.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1491208730051014974/8B5E35D35E33FC341DD2A9744591015C6F726AA3/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.2,
          "MergeDistancePixels": 15.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3b67af",
      "Name": "3DText",
      "Transform": {
        "posX": 2.112192,
        "posY": -7.03335127E-06,
        "posZ": 1.08995044,
        "rotX": 90.0,
        "rotY": -2.947798E-10,
        "rotZ": 0.0,
        "scaleX": 1.99999988,
        "scaleY": 1.5,
        "scaleZ": 1.5
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "Text": {
        "Text": "Last Turn",
        "colorstate": {
          "r": 0.57665503,
          "g": 0.980077863,
          "b": 1.0
        },
        "fontSize": 150
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "329cb1",
      "Name": "Custom_PDF",
      "Transform": {
        "posX": -67.31979,
        "posY": 0.9600004,
        "posZ": -0.215953827,
        "rotX": -2.68594764E-08,
        "rotY": 180.0,
        "rotZ": 3.69745159E-08,
        "scaleX": 5.1885004,
        "scaleY": 1.0,
        "scaleZ": 5.1885004
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomPDF": {
        "PDFUrl": "http://cloud-3.steamusercontent.com/ugc/1475443714447602330/21BA032E925C807B4ABCCE8E4AAEBA09E634CC12/",
        "PDFPassword": "",
        "PDFPage": 0,
        "PDFPageOffset": 0
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "bebb58",
      "Name": "Deck",
      "Transform": {
        "posX": 19.8151283,
        "posY": 1.99979663,
        "posZ": 8.195429,
        "rotX": 5.316E-06,
        "rotY": 180.0,
        "rotZ": 180.0,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Deck",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        906,
        916,
        942,
        929,
        918,
        930,
        931,
        915,
        921,
        939,
        914,
        922,
        907,
        917,
        923,
        940,
        925,
        928,
        903,
        909,
        920,
        935,
        933,
        911,
        937,
        924,
        919,
        905,
        904,
        936,
        902,
        927,
        910,
        941,
        908,
        912,
        934,
        926,
        913,
        900,
        938,
        901,
        932
      ],
      "CustomDeck": {
        "9": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "41f17d",
          "Name": "Card",
          "Transform": {
            "posX": -22.6901169,
            "posY": 1.44216537,
            "posZ": 13.5185852,
            "rotX": 1.10199629E-07,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 906,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "a78506",
          "Name": "Card",
          "Transform": {
            "posX": -21.3142414,
            "posY": 0.999178469,
            "posZ": 14.0137806,
            "rotX": 9.248563E-05,
            "rotY": 179.995178,
            "rotZ": 0.878807,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 916,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "a255ce",
          "Name": "Card",
          "Transform": {
            "posX": -19.54671,
            "posY": 0.9992525,
            "posZ": 14.0137682,
            "rotX": 0.000236271619,
            "rotY": 179.992172,
            "rotZ": 0.881111443,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 942,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardPromote\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n\r\nmodelClass = \"card action promote\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\n    count = startingCount;\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"yellow\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"red\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"green\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"promote\"\r\n    gameModel.active.value = startingCount -- provided in including files\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardPromote\r\nstartingCount = 3\r\ncount = 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"count\":3,\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "279fff",
          "Name": "Card",
          "Transform": {
            "posX": -21.0629368,
            "posY": 0.9989321,
            "posZ": 7.510316,
            "rotX": 0.000198963375,
            "rotY": 180.005463,
            "rotZ": 0.8701542,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 929,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 2,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "9592aa",
          "Name": "Card",
          "Transform": {
            "posX": -19.2984257,
            "posY": 0.999226034,
            "posZ": 7.509828,
            "rotX": 0.000176815185,
            "rotY": 179.996475,
            "rotZ": 0.8802933,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 918,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\nto = {\r\n    yellow = 2,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "ed9e4f",
          "Name": "Card",
          "Transform": {
            "posX": -17.5546932,
            "posY": 0.9994086,
            "posZ": 7.51058,
            "rotX": 6.959911E-05,
            "rotY": 180.00502,
            "rotZ": 0.886745632,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 930,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 1,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "d3e87e",
          "Name": "Card",
          "Transform": {
            "posX": -22.8238583,
            "posY": 0.973501563,
            "posZ": 7.51057339,
            "rotX": 0.0005641952,
            "rotY": 180.004929,
            "rotZ": -0.00448852172,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 931,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "a7a66e",
          "Name": "Card",
          "Transform": {
            "posX": -17.8032856,
            "posY": 0.99941957,
            "posZ": 14.0144262,
            "rotX": 0.000102829268,
            "rotY": 180.002914,
            "rotZ": 0.887077153,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 915,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "845d54",
          "Name": "Card",
          "Transform": {
            "posX": -16.0546017,
            "posY": 0.999467134,
            "posZ": 14.0145,
            "rotX": 9.980651E-05,
            "rotY": 179.989441,
            "rotZ": 0.888711035,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 921,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 1,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "723cda",
          "Name": "Card",
          "Transform": {
            "posX": -15.8049011,
            "posY": 0.999441,
            "posZ": 7.510669,
            "rotX": 0.000142697885,
            "rotY": 179.9955,
            "rotZ": 0.887744069,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 939,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 5,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "5fa609",
          "Name": "Card",
          "Transform": {
            "posX": -14.0541325,
            "posY": 0.9994233,
            "posZ": 7.510483,
            "rotX": 0.000142126082,
            "rotY": 180.00386,
            "rotZ": 0.887135744,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 914,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\nto = {\r\n    yellow = 1,\r\n    red = 1,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "3d140e",
          "Name": "Card",
          "Transform": {
            "posX": -14.3032217,
            "posY": 0.9994306,
            "posZ": 14.0143089,
            "rotX": 0.000116323274,
            "rotY": 180.000092,
            "rotZ": 0.887431443,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 922,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "055cc5",
          "Name": "Card",
          "Transform": {
            "posX": -12.5534468,
            "posY": 0.9994438,
            "posZ": 14.0143089,
            "rotX": 0.000171361156,
            "rotY": 179.994019,
            "rotZ": 0.887786448,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 907,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 2,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\naction = \"collect\";\r\nready = false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":false,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "ca6d19",
          "Name": "Card",
          "Transform": {
            "posX": -12.3039255,
            "posY": 0.9994433,
            "posZ": 7.51050234,
            "rotX": 0.000121470992,
            "rotY": 180.006485,
            "rotZ": 0.8878573,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 917,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 1,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "36e406",
          "Name": "Card",
          "Transform": {
            "posX": -10.553627,
            "posY": 0.999442458,
            "posZ": 7.51045847,
            "rotX": 0.000117505668,
            "rotY": 180.001068,
            "rotZ": 0.8878332,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 923,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "40e3fe",
          "Name": "Card",
          "Transform": {
            "posX": -10.8029928,
            "posY": 0.9994258,
            "posZ": 14.0141869,
            "rotX": 9.523161E-05,
            "rotY": 179.999359,
            "rotZ": 0.88730365,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 940,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "24d425",
          "Name": "Card",
          "Transform": {
            "posX": -8.803582,
            "posY": 0.999444067,
            "posZ": 7.51042128,
            "rotX": 0.000130948989,
            "rotY": 180.004333,
            "rotZ": 0.8878658,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 925,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "b2ad1d",
          "Name": "Card",
          "Transform": {
            "posX": -9.052962,
            "posY": 0.9994496,
            "posZ": 14.01419,
            "rotX": 0.000119001794,
            "rotY": 179.9991,
            "rotZ": 0.888076067,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 928,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "fc038e",
          "Name": "Card",
          "Transform": {
            "posX": -7.302939,
            "posY": 0.9994527,
            "posZ": 14.01419,
            "rotX": 0.000106884967,
            "rotY": 179.999084,
            "rotZ": 0.8882055,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 903,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "3952d5",
          "Name": "Card",
          "Transform": {
            "posX": -7.053627,
            "posY": 0.999449,
            "posZ": 7.510405,
            "rotX": 0.000130078784,
            "rotY": 180.005264,
            "rotZ": 0.8880412,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 909,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "2aec27",
          "Name": "Card",
          "Transform": {
            "posX": -5.552929,
            "posY": 0.999461055,
            "posZ": 14.01419,
            "rotX": 0.000145272919,
            "rotY": 179.9991,
            "rotZ": 0.8884235,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 920,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 4,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "a01844",
          "Name": "Card",
          "Transform": {
            "posX": -5.303699,
            "posY": 0.999438465,
            "posZ": 7.51039934,
            "rotX": 0.000137181763,
            "rotY": 180.005615,
            "rotZ": 0.887668,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 935,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 3,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 3\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "3dc6ef",
          "Name": "Card",
          "Transform": {
            "posX": -3.80292845,
            "posY": 0.999456167,
            "posZ": 14.0141916,
            "rotX": 0.000152745371,
            "rotY": 179.999084,
            "rotZ": 0.8882482,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 933,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 1,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "49711e",
          "Name": "Card",
          "Transform": {
            "posX": -3.55369234,
            "posY": 0.9994558,
            "posZ": 7.510398,
            "rotX": 0.000114654809,
            "rotY": 180.0056,
            "rotZ": 0.8883012,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 911,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 4,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "b7ae93",
          "Name": "Card",
          "Transform": {
            "posX": -2.05292559,
            "posY": 0.999443769,
            "posZ": 14.0141926,
            "rotX": 0.000174874323,
            "rotY": 179.999084,
            "rotZ": 0.8877872,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 937,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "19046e",
          "Name": "Card",
          "Transform": {
            "posX": -1.80369484,
            "posY": 0.9994556,
            "posZ": 7.51039743,
            "rotX": 0.000139771844,
            "rotY": 180.005569,
            "rotZ": 0.8882479,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 924,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "9bc738",
          "Name": "Card",
          "Transform": {
            "posX": -0.3031117,
            "posY": 0.999429345,
            "posZ": 14.0142736,
            "rotX": 0.000156287148,
            "rotY": 179.9959,
            "rotZ": 0.8873196,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 919,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\nto = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "07e71f",
          "Name": "Card",
          "Transform": {
            "posX": -0.0536901951,
            "posY": 0.9994415,
            "posZ": 7.51039839,
            "rotX": 0.000156585855,
            "rotY": 180.004318,
            "rotZ": 0.8877389,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 905,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 1,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "24192a",
          "Name": "Card",
          "Transform": {
            "posX": 1.4470793,
            "posY": 0.9994191,
            "posZ": 14.01419,
            "rotX": 0.000116186864,
            "rotY": 179.999039,
            "rotZ": 0.887033939,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 904,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 1,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "965b4e",
          "Name": "Card",
          "Transform": {
            "posX": 1.69631374,
            "posY": 0.9994295,
            "posZ": 7.51039934,
            "rotX": 0.000150560183,
            "rotY": 180.004349,
            "rotZ": 0.887335241,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 936,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "20bb80",
          "Name": "Card",
          "Transform": {
            "posX": 3.19689322,
            "posY": 0.999441266,
            "posZ": 14.0142689,
            "rotX": 0.0001752113,
            "rotY": 179.995834,
            "rotZ": 0.8876959,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 902,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 4,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "381075",
          "Name": "Card",
          "Transform": {
            "posX": 3.446312,
            "posY": 0.9994484,
            "posZ": 7.51039934,
            "rotX": 0.000127364649,
            "rotY": 180.004333,
            "rotZ": 0.888025343,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 927,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 2,\r\n    red = 1,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "e1c559",
          "Name": "Card",
          "Transform": {
            "posX": 4.94707775,
            "posY": 0.9994317,
            "posZ": 14.0141907,
            "rotX": 0.000148478546,
            "rotY": 179.999039,
            "rotZ": 0.887415946,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 910,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "1ad802",
          "Name": "Card",
          "Transform": {
            "posX": 6.697079,
            "posY": 0.9994361,
            "posZ": 14.0141907,
            "rotX": 0.000102114733,
            "rotY": 179.999039,
            "rotZ": 0.8876344,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 941,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\nto = {\r\n    yellow = 1,\r\n    red = 1,\r\n    green = 3,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "d7e925",
          "Name": "Card",
          "Transform": {
            "posX": 5.19630671,
            "posY": 0.9994475,
            "posZ": 7.51039839,
            "rotX": 0.000116637748,
            "rotY": 180.004318,
            "rotZ": 0.888005257,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 908,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "f2b21b",
          "Name": "Card",
          "Transform": {
            "posX": 8.44708252,
            "posY": 0.9994447,
            "posZ": 14.0141907,
            "rotX": 0.000116807911,
            "rotY": 179.999039,
            "rotZ": 0.887907445,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 912,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 5,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 3,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "6edfe7",
          "Name": "Card",
          "Transform": {
            "posX": 6.946304,
            "posY": 0.99946034,
            "posZ": 7.510398,
            "rotX": 0.000100230558,
            "rotY": 180.004288,
            "rotZ": 0.8884815,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 934,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 3,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "2de793",
          "Name": "Card",
          "Transform": {
            "posX": 10.1967754,
            "posY": 0.9994629,
            "posZ": 14.0142269,
            "rotX": 9.4904E-05,
            "rotY": 179.99585,
            "rotZ": 0.888576567,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 926,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 2,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "7d3ba2",
          "Name": "Card",
          "Transform": {
            "posX": 8.696307,
            "posY": 0.9994632,
            "posZ": 7.51039743,
            "rotX": 7.86364E-05,
            "rotY": 180.004272,
            "rotZ": 0.8886126,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 913,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 1\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "61318a",
          "Name": "Card",
          "Transform": {
            "posX": 11.9470873,
            "posY": 0.9994644,
            "posZ": 14.01419,
            "rotX": 8.11962E-05,
            "rotY": 179.999115,
            "rotZ": 0.888654351,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 900,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 1,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "d9d8e3",
          "Name": "Card",
          "Transform": {
            "posX": 10.4463043,
            "posY": 0.999478936,
            "posZ": 7.51039648,
            "rotX": 5.61663037E-05,
            "rotY": 180.004364,
            "rotZ": 0.889198661,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 938,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 4,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 2,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "17ba34",
          "Name": "Card",
          "Transform": {
            "posX": 13.6967783,
            "posY": 0.9994866,
            "posZ": 14.0142012,
            "rotX": -7.000225E-07,
            "rotY": 180.000458,
            "rotZ": 0.889558,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 901,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 3,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        },
        {
          "GUID": "301be0",
          "Name": "Card",
          "Transform": {
            "posX": 12.1963081,
            "posY": 0.99949,
            "posZ": 7.51039553,
            "rotX": 1.06132211E-06,
            "rotY": 180.004425,
            "rotZ": 0.8896637,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Action Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 932,
          "SidewaysCard": false,
          "CustomDeck": {
            "9": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
              "NumWidth": 9,
              "NumHeight": 5,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include ActionCardExchange\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action exchange\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Do Exchange\", quickAction)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"exchange\"\r\n    gameModel.active.value = {\r\n        from = CubeCount:new(from), -- provided in including files\r\n        to = CubeCount:new(to),     -- provided in including files\r\n    }\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardExchange\r\n\r\nfrom = {\r\n    yellow = 0,\r\n    red = 3,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\nto = {\r\n    yellow = 0,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 2\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "258d2e",
      "Name": "Deck",
      "Transform": {
        "posX": 20.15,
        "posY": 1.94202852,
        "posZ": 16.5819378,
        "rotX": 7.259652E-06,
        "rotY": 180.0,
        "rotZ": 180.0,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Point Deck",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        719,
        726,
        735,
        722,
        712,
        715,
        707,
        732,
        716,
        720,
        725,
        700,
        718,
        717,
        730,
        704,
        728,
        706,
        714,
        723,
        708,
        709,
        710,
        703,
        713,
        702,
        705,
        733,
        701,
        731,
        721
      ],
      "CustomDeck": {
        "7": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
          "NumWidth": 9,
          "NumHeight": 4,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "\r\n\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "9b648c",
          "Name": "Card",
          "Transform": {
            "posX": -24.2671165,
            "posY": 0.973486066,
            "posZ": -7.3426156,
            "rotX": 0.000646937464,
            "rotY": 180.016891,
            "rotZ": -0.00514569227,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 719,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 10,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 5,\r\n        green = 0,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "3cda28",
          "Name": "Card",
          "Transform": {
            "posX": -24.2126083,
            "posY": 0.973484337,
            "posZ": -13.6364574,
            "rotX": 0.0006554495,
            "rotY": 180.019409,
            "rotZ": -0.005218249,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 726,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 6,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 2,\r\n        green = 0,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "c37bb1",
          "Name": "Card",
          "Transform": {
            "posX": -22.45701,
            "posY": 0.9989707,
            "posZ": -13.63773,
            "rotX": 0.000188707738,
            "rotY": 180.019165,
            "rotZ": 0.8698888,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 735,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 14,\r\n    cost = {\r\n        yellow = 3,\r\n        red = 1,\r\n        green = 1,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "ac50c6",
          "Name": "Card",
          "Transform": {
            "posX": -22.5083923,
            "posY": 0.998936236,
            "posZ": -7.3439436,
            "rotX": 0.000204698255,
            "rotY": 180.02124,
            "rotZ": 0.8686668,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 722,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 15,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 5,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "5b1c7a",
          "Name": "Card",
          "Transform": {
            "posX": -20.6958046,
            "posY": 0.9992867,
            "posZ": -13.6369238,
            "rotX": 0.000243047412,
            "rotY": 180.021378,
            "rotZ": 0.8806215,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 712,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 0,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "dfb14f",
          "Name": "Card",
          "Transform": {
            "posX": -20.7484455,
            "posY": 0.999295354,
            "posZ": -7.34275627,
            "rotX": 0.000221001275,
            "rotY": 180.033585,
            "rotZ": 0.8809626,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 715,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 11,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 0,\r\n        green = 3,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "7c7666",
          "Name": "Card",
          "Transform": {
            "posX": -18.9491444,
            "posY": 0.9994466,
            "posZ": -13.6363268,
            "rotX": 3.24547473E-05,
            "rotY": 180.02301,
            "rotZ": 0.886466146,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 707,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 10,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 2,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "b424cf",
          "Name": "Card",
          "Transform": {
            "posX": -19.0015488,
            "posY": 0.9994504,
            "posZ": -7.34245253,
            "rotX": 5.19487658E-05,
            "rotY": 180.008331,
            "rotZ": 0.8865567,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 732,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 14,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 2,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "442d62",
          "Name": "Card",
          "Transform": {
            "posX": -17.25172,
            "posY": 0.999473333,
            "posZ": -7.342576,
            "rotX": 0.000132284986,
            "rotY": 180.016235,
            "rotZ": 0.887216747,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 716,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 9,\r\n    cost = {\r\n        yellow = 3,\r\n        red = 0,\r\n        green = 2,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "e16e52",
          "Name": "Card",
          "Transform": {
            "posX": -17.1987438,
            "posY": 0.999467552,
            "posZ": -13.6362963,
            "rotX": 0.000140261283,
            "rotY": 180.01239,
            "rotZ": 0.8870106,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 720,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 14,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 3,\r\n        green = 0,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "42c887",
          "Name": "Card",
          "Transform": {
            "posX": -15.4478893,
            "posY": 0.9994788,
            "posZ": -13.6364288,
            "rotX": 0.000131217341,
            "rotY": 180.01506,
            "rotZ": 0.887407959,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 725,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 8,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 0,\r\n        green = 2,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "3314f4",
          "Name": "Card",
          "Transform": {
            "posX": -15.5011377,
            "posY": 0.9994816,
            "posZ": -7.34265661,
            "rotX": 0.000123209626,
            "rotY": 180.021149,
            "rotZ": 0.8875198,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 700,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 10,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 0,\r\n        green = 0,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "cfd020",
          "Name": "Card",
          "Transform": {
            "posX": -13.7504454,
            "posY": 0.999467254,
            "posZ": -7.342591,
            "rotX": 0.000120819735,
            "rotY": 180.0139,
            "rotZ": 0.8870283,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 718,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 16,\r\n    cost = {\r\n        yellow = 1,\r\n        red = 3,\r\n        green = 1,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "11ceef",
          "Name": "Card",
          "Transform": {
            "posX": -13.6975746,
            "posY": 0.9994748,
            "posZ": -13.6364965,
            "rotX": 0.000142793127,
            "rotY": 180.017471,
            "rotZ": 0.88725245,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 717,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 19,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 2,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "30a43a",
          "Name": "Card",
          "Transform": {
            "posX": -12.0005369,
            "posY": 0.999498,
            "posZ": -7.34277725,
            "rotX": 0.000144139281,
            "rotY": 180.015854,
            "rotZ": 0.888039947,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 730,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 14,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 0,\r\n        brown = 3\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "d44b41",
          "Name": "Card",
          "Transform": {
            "posX": -11.9474478,
            "posY": 0.999495864,
            "posZ": -13.6364937,
            "rotX": 0.000122254511,
            "rotY": 180.013428,
            "rotZ": 0.888008237,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 704,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 15,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 2,\r\n        green = 0,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "59a37b",
          "Name": "Card",
          "Transform": {
            "posX": -10.1973658,
            "posY": 0.999495149,
            "posZ": -13.6365423,
            "rotX": 0.000128722488,
            "rotY": 180.01503,
            "rotZ": 0.8879762,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 728,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 14,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 0,\r\n        green = 0,\r\n        brown = 3\r\n    }\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "d22a12",
          "Name": "Card",
          "Transform": {
            "posX": -10.2501078,
            "posY": 0.9994889,
            "posZ": -7.342724,
            "rotX": 0.000151067667,
            "rotY": 180.012085,
            "rotZ": 0.8877202,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 706,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 13,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 3,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "185f5e",
          "Name": "Card",
          "Transform": {
            "posX": -8.500113,
            "posY": 0.999491751,
            "posZ": -7.34275246,
            "rotX": 0.000145874408,
            "rotY": 180.01239,
            "rotZ": 0.887827456,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 714,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 4,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "2d8186",
          "Name": "Card",
          "Transform": {
            "posX": -8.447354,
            "posY": 0.999498367,
            "posZ": -13.6365461,
            "rotX": 0.000132332454,
            "rotY": 180.014267,
            "rotZ": 0.888076067,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 723,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 1,\r\n        red = 0,\r\n        green = 2,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "965c41",
          "Name": "Card",
          "Transform": {
            "posX": -6.750098,
            "posY": 0.99949,
            "posZ": -7.34274864,
            "rotX": 0.000136831266,
            "rotY": 180.013428,
            "rotZ": 0.8877831,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 708,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 13,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 2,\r\n        green = 2,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "54075c",
          "Name": "Card",
          "Transform": {
            "posX": -6.697306,
            "posY": 0.9994866,
            "posZ": -13.6365747,
            "rotX": 0.000131622932,
            "rotY": 180.0157,
            "rotZ": 0.8876712,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 709,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 7,\r\n    cost = {\r\n        yellow = 3,\r\n        red = 2,\r\n        green = 0,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "d041f8",
          "Name": "Card",
          "Transform": {
            "posX": -5.000082,
            "posY": 0.9994904,
            "posZ": -7.342791,
            "rotX": 0.000123941732,
            "rotY": 180.013,
            "rotZ": 0.8878138,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 710,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 1,\r\n        red = 1,\r\n        green = 1,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "daf2cd",
          "Name": "Card",
          "Transform": {
            "posX": -4.94731474,
            "posY": 0.9995056,
            "posZ": -13.6365652,
            "rotX": 0.000105369887,
            "rotY": 180.015518,
            "rotZ": 0.888366044,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 703,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 20,\r\n    cost = {\r\n        yellow = 1,\r\n        red = 1,\r\n        green = 1,\r\n        brown = 3\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "183e65",
          "Name": "Card",
          "Transform": {
            "posX": -3.25035453,
            "posY": 0.999507844,
            "posZ": -7.342798,
            "rotX": 9.668524E-05,
            "rotY": 180.014664,
            "rotZ": 0.8884606,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 713,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 2,\r\n        green = 1,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "a22942",
          "Name": "Card",
          "Transform": {
            "posX": -3.197177,
            "posY": 0.999508262,
            "posZ": -13.6365585,
            "rotX": 8.289973E-05,
            "rotY": 180.013824,
            "rotZ": 0.8885037,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 702,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 20,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 0,\r\n        brown = 5\r\n    }\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "f38bdb",
          "Name": "Card",
          "Transform": {
            "posX": -1.49999988,
            "posY": 0.9995074,
            "posZ": -7.342776,
            "rotX": 8.332202E-05,
            "rotY": 180.013809,
            "rotZ": 0.8884689,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 705,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 12,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 3,\r\n        green = 2,\r\n        brown = 0\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "fab8f8",
          "Name": "Card",
          "Transform": {
            "posX": -1.44716442,
            "posY": 0.9995256,
            "posZ": -13.6365623,
            "rotX": 5.442635E-05,
            "rotY": 180.016037,
            "rotZ": 0.889144361,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 733,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 17,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 0,\r\n        green = 2,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "d4cee4",
          "Name": "Card",
          "Transform": {
            "posX": 0.2498004,
            "posY": 0.999526858,
            "posZ": -7.342791,
            "rotX": 5.367754E-05,
            "rotY": 180.014786,
            "rotZ": 0.889187634,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 701,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 9,\r\n    cost = {\r\n        yellow = 2,\r\n        red = 1,\r\n        green = 0,\r\n        brown = 1\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "e2bd63",
          "Name": "Card",
          "Transform": {
            "posX": 0.3029116,
            "posY": 0.9995367,
            "posZ": -13.6365566,
            "rotX": 1.757521E-06,
            "rotY": 180.016022,
            "rotZ": 0.8896155,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 731,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 16,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 0,\r\n        brown = 4\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        },
        {
          "GUID": "a20935",
          "Name": "Card",
          "Transform": {
            "posX": 2.00014687,
            "posY": 0.999535,
            "posZ": -7.34274769,
            "rotX": 4.368731E-06,
            "rotY": 180.013031,
            "rotZ": 0.8895487,
            "scaleX": 1.8,
            "scaleY": 1.0,
            "scaleZ": 1.8
          },
          "Nickname": "Point Card",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 721,
          "SidewaysCard": false,
          "CustomDeck": {
            "7": {
              "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664942748/B18D8A8A1150B269C44568E68B44EC426B3CDA8F/",
              "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470941196231403470/26F27705727FD3740B8CA2C6978613F7DB3C83B9/",
              "NumWidth": 9,
              "NumHeight": 4,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "---> #include PointCard\r\nmodelClass = \"card points\"\r\n\r\n-- include in implementation \r\n-- model = {\r\n--     value = ?,\r\n--     cost = {\r\n--         yellow = ?,\r\n--         red = ?,\r\n--         green = ?,\r\n--         brown = ?\r\n--     }\r\n-- }\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\nend\r\n\r\n---< #include PointCard\r\n\r\nmodel = {\r\n    value = 17,\r\n    cost = {\r\n        yellow = 0,\r\n        red = 0,\r\n        green = 3,\r\n        brown = 2\r\n    }\r\n}\r\n\r\n\r\n",
          "LuaScriptState": "[]",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "7d960a",
      "Name": "Card",
      "Transform": {
        "posX": 35.3581047,
        "posY": 3.07482171,
        "posZ": -33.9999962,
        "rotX": 1.38467646E-08,
        "rotY": 180.0,
        "rotZ": -6.070408E-08,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 544,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardPromote\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n\r\nmodelClass = \"card action promote\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\n    count = startingCount;\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"yellow\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"red\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"green\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"promote\"\r\n    gameModel.active.value = startingCount -- provided in including files\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardPromote\r\ncount = 2;\r\nstartingCount = 2;\r\n\r\n\r\n",
      "LuaScriptState": "{\"count\":2,\"owner\":\"White\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "92e907",
      "Name": "Card",
      "Transform": {
        "posX": 30.6418934,
        "posY": 2.97482181,
        "posZ": -33.9999962,
        "rotX": -6.78623024E-09,
        "rotY": 180.0,
        "rotZ": -8.15438241E-08,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 543,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
      "LuaScriptState": "{\"owner\":\"White\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "0687b0",
      "Name": "Card",
      "Transform": {
        "posX": -35.3581047,
        "posY": 2.97482181,
        "posZ": -34.42515,
        "rotX": -2.108137E-08,
        "rotY": 180.0,
        "rotZ": -2.62185949E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 543,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
      "LuaScriptState": "{\"owner\":\"Red\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "200c7b",
      "Name": "Card",
      "Transform": {
        "posX": -2.35810423,
        "posY": 2.97482181,
        "posZ": -34.42515,
        "rotX": -1.736076E-08,
        "rotY": 180.0,
        "rotZ": -1.44547656E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 543,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardCollect\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n---> #include CubeCount\r\n-- class CubeCount key:value -> color:count pairs\r\nCubeCount = {yellow = 0, red = 0, green = 0, brown = 0}\r\nfunction CubeCount:new(o)\r\n    o = o or {yellow = 0, red = 0, green = 0, brown = 0}\r\n    setmetatable(o, self)\r\n    self.__index = self\r\n    return o\r\nend\r\n\r\nfunction CubeCount:copy()\r\n    local r = CubeCount:new()\r\n    r.yellow = self.yellow\r\n    r.red = self.red\r\n    r.green = self.green\r\n    r.brown = self.brown\r\n    return r\r\nend\r\n\r\n-- return false if any value in this is < the corresponding value in that\r\n-- return true if all values in this are >= the corresponding value in that\r\nfunction CubeCount:has(that)\r\n    if self.yellow < that.yellow then return false end\r\n    if self.red < that.red then return false end\r\n    if self.green < that.green then return false end\r\n    if self.brown < that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:equals(that)\r\n    if self.yellow ~= that.yellow then return false end\r\n    if self.red ~= that.red then return false end\r\n    if self.green ~= that.green then return false end\r\n    if self.brown ~= that.brown then return false end\r\n    return true\r\nend\r\n\r\nfunction CubeCount:add(that)\r\n    self.yellow = self.yellow + that.yellow\r\n    self.red = self.red + that.red\r\n    self.green = self.green + that.green\r\n    self.brown = self.brown + that.brown\r\n    return true\r\nend\r\n\r\nfunction CubeCount:subtract(that)\r\n    self.yellow = self.yellow - that.yellow\r\n    self.red = self.red - that.red\r\n    self.green = self.green - that.green\r\n    self.brown = self.brown - that.brown\r\n    return true\r\nend\r\n\r\n-- count all cubes, return the sum\r\nfunction CubeCount:sum()\r\n    local r = 0\r\n    r = r + self.yellow\r\n    r = r + self.red\r\n    r = r + self.green\r\n    r = r + self.brown\r\n    return r\r\nend\r\n\r\nfunction CubeCount:toString()\r\n    local r = \"\"\r\n    for i = 1,self.yellow do r = r .. \"Y\" end\r\n    for i = 1,self.red do r = r .. \"R\" end\r\n    for i = 1,self.green do r = r .. \"G\" end\r\n    for i = 1,self.brown do r = r .. \"B\" end\r\n    return r\r\nend\r\n\r\n---< #include CubeCount\r\n\r\nmodelClass = \"card action collect\"\r\n\r\n-- change state from ready to spent\r\nfunction resetState()\r\n    state = \"ready\"\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"collect\"\r\n    gameModel.active.value = cubes -- provided in including files\r\n    collect()\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n\r\n-- Called when an action-collect card is played.\r\n-- The card is considered played when it collides with something.\r\n-- see onObjectCollisionEnter in Hooks.ttslua\r\nfunction collect()\r\n    log(\"collect\")\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    local player = Player[gameModel.currentPlayer]\r\n    local count = CubeCount:new(cubes)\r\n    local playerName = Global.Player[gameModel.currentPlayer].steam_name or \"?\"\r\n    local msg = playerName .. \" played card collect \" .. count:toString()\r\n\r\n    broadcastToAll(msg, gameModel.currentPlayer)\r\n \r\n    self.unregisterCollisions()\r\n    state = spent;\r\n \r\n    Global.call(\r\n        \"addCubesToPlayerCard\",\r\n        cubes, -- provided in including files\r\n        function() passTurn(owner) end \r\n    );\r\n end\r\n---< #include ActionCardCollect\r\n\r\ncubes = {\r\n    yellow = 2,\r\n    red = 0,\r\n    green = 0,\r\n    brown = 0\r\n}\r\n\r\n\r\n",
      "LuaScriptState": "{\"owner\":\"Yellow\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "938df7",
      "Name": "Card",
      "Transform": {
        "posX": 2.35810471,
        "posY": 3.07482171,
        "posZ": -34.42515,
        "rotX": -1.90935E-08,
        "rotY": 180.0,
        "rotZ": -2.13851109E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 544,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardPromote\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n\r\nmodelClass = \"card action promote\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\n    count = startingCount;\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"yellow\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"red\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"green\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"promote\"\r\n    gameModel.active.value = startingCount -- provided in including files\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardPromote\r\ncount = 2;\r\nstartingCount = 2;\r\n\r\n\r\n",
      "LuaScriptState": "{\"count\":2,\"owner\":\"Yellow\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "5934a2",
      "Name": "Card",
      "Transform": {
        "posX": -30.6418915,
        "posY": 3.07482171,
        "posZ": -34.42515,
        "rotX": -1.47408059E-08,
        "rotY": 180.0,
        "rotZ": -2.43500864E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 544,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "---> #include ActionCardPromote\r\n---> #include ActionCard\r\n---> #include Utility\r\n-- add context menu times for action cards\r\n-- this is called when the card enters play (touches table)\r\nfunction setupContextMenu(card)\r\n    card.clearContextMenu()\r\n    if isClass(card, \"promote\") then\r\n        card.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"yellow\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"red\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n\r\n        card.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n            local cubes = getPlayerCubes(owner)\r\n            local cube = cubes:getCube(\"green\")\r\n            quickPromote(CubeCollection:new(cube), playerColor)\r\n        end)\r\n    elseif isClass(card, \"exchange\") then\r\n        card.addContextMenuItem(\"Do Exchange\", quickAction)\r\n    elseif isClass(card, \"collect\") then\r\n    end\r\nend\r\n\r\n-- return a new array containing all cards of the given type from the specified zone\r\nfunction getCards(zoneName)\r\n   r = {}\r\n   for i,key in ipairs(keys[zoneName]) do\r\n       local zone = getObjectFromGUID(key)\r\n       local contents = zone.getObjects()\r\n       if contents ~= nil then\r\n           for i,c in ipairs(contents) do\r\n               if isClass(c, \"card\") then table.insert(r, c) end\r\n           end\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return an array of all unowned point cards in play\r\nfunction getPointCards()\r\n   return getCards(\"pointCardsScriptingZone\")\r\nend\r\n\r\n-- return an array of all unowned action cards in play\r\nfunction getActionCards()\r\n   return getCards(\"actionCardsScriptingZone\")\r\nend\r\n\r\nfunction movePlayingIndicator(color)\r\n   local pawn = getObjectFromGUID(keys.playingIndicator)\r\n   local playerCard = getObjectFromGUID(keys.caravanCards[color])\r\n   local position = playerCard.getPosition()\r\n   local transform = playerCard.getTransformForward()\r\n   position.z = position.z - transform.z * 7\r\n\r\n   pawn.setColorTint(color)\r\n   pawn.setPositionSmooth(position, false, false)\r\nend\r\n\r\nfunction tallyScore(playerColor)\r\n   local scoreText = getObjectFromGUID(keys.scores[playerColor])\r\n   local sum = gameModel.players[playerColor].score\r\n   local cubes = getPlayerCubes(playerColor):count()\r\n   cubes.yellow = 0;\r\n   sum = sum + cubes:sum()\r\n\r\n   scoreText.setValue(\"\" .. sum)\r\n   return sum\r\nend\r\n\r\nfunction incrementDebugPlayer()\r\n    if #Player.getPlayers() == 1 and gameModel.players[gameModel.currentPlayer].bot == false then\r\n        Player.getPlayers()[1].changeColor(gameModel.currentPlayer)\r\n    end\r\nend\r\n\r\nfunction quickAction(playerColor)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.active.action == \"promote\" then\r\n       local cubes = cubesUnderMouse(playerColor)\r\n       if #cubes == 0 then return end\r\n       if #cubes > gameModel.active.value then return end\r\n       quickPromote(cubes, playerColor)\r\n   elseif gameModel.active.action == \"exchange\" then\r\n       quickExchange(playerColor)\r\n   end\r\nend\r\n\r\nfunction quickExchange(playerColor)\r\n   local from = gameModel.active.value.from\r\n   if getPlayerCubes(gameModel.currentPlayer):has(from) == false then return end\r\n   local cubes = getPlayerCubes(gameModel.currentPlayer):subset(from)\r\n   doExchange(cubes, playerColor)\r\nend\r\n\r\nfunction quickPromote(cubes, playerColor)\r\n   function cb()\r\n       if gameModel.active.value == 0 then\r\n           passTurn(playerColor)\r\n       else\r\n           idle()\r\n       end\r\n   end\r\n\r\n   if gameModel.state == \"ready\" or gameModel.state == \"promote\" then\r\n       doPromote(cubes, cb)\r\n   end\r\nend\r\n\r\nfunction getSpentCards(playerColor)\r\n   r = {}\r\n   for i,o in ipairs(getAllObjects()) do\r\n       if isClass(o, \"card\") == false then goto continue end\r\n       if isClass(o, \"action\") == false then goto continue end\r\n       if o.getVar(\"state\") ~= \"spent\" then goto continue end\r\n       if o.getVar(\"owner\") ~= playerColor then goto continue end\r\n\r\n       table.insert(r, o)\r\n\r\n       ::continue::\r\n   end\r\n   return r\r\nend\r\n\r\nfunction rest(obj, playerColor)\r\n   local player = Player[gameModel.currentPlayer]\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   if gameModel.state == \"promote\" or gameModel.state == \"exchange\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       passTurn(playerColor)\r\n       return\r\n   end\r\n\r\n   if gameModel.state == \"ready\" then\r\n       local playerName = Player[gameModel.currentPlayer].steam_name or \"?\"\r\n       local msg = playerName .. \" picks up cards and rests\"\r\n       broadcastToAll(msg, gameModel.currentPlayer)\r\n       for i,o in ipairs(getAllObjects()) do\r\n           if o.getVar(\"owner\") == playerColor then\r\n               if isClass(o, \"card\") and isClass(o, \"action\") then\r\n                   moveCardToHand(o, playerColor)\r\n               end\r\n           end\r\n       end\r\n       passTurn(playerColor)\r\n   end\r\n\r\n   if gameModel.state == \"discard\" then\r\n       passTurn(playerColor)\r\n   end\r\nend\r\n\r\n-- playerColor: only pass turn if the current player = playerColor\r\nfunction passTurn(playerColor)\r\n   log(\"passTurn \" .. playerColor .. \" \" .. gameModel.currentPlayer)\r\n   if gameModel.currentPlayer ~= playerColor then return end\r\n\r\n   clearActive()\r\n   endTurnCleanup()\r\n\r\n   Wait.frames(\r\n      function()\r\n           local c = getPlayerCubes(gameModel.currentPlayer):sum()\r\n\r\n           if (c > 10) then\r\n               setState(\"discard\")\r\n               local message = \"Player must discard cubes\"\r\n               broadcastToAll(message)\r\n               idle()\r\n           else\r\n               startTurn(gameModel.nextPlayer[gameModel.currentPlayer])\r\n           end\r\n       end\r\n   ,1)\r\nend\r\n\r\n-- retrieve the object at position if the object is of 'class'\r\n-- if class is nil return any object at position\r\n-- returns nil if no object there\r\n-- returns first object at position if muliple are at position\r\nfunction getObjectAt(pos, class, sz)\r\n   sz = sz or 2\r\n\r\n   local tab = {\r\n       origin = {pos.x, 0, pos.z},\r\n       direction = {0, 1, 0},\r\n       max_distance = 20,\r\n       type = 1,\r\n       size = {sz, sz, sz}\r\n   }\r\n\r\n   local hit = Physics.cast(tab)\r\n\r\n   if (hit == nil) then return nil end\r\n\r\n   if class ~= nil then\r\n       for i,o in ipairs(hit) do\r\n           if isClass(o.hit_object, class) then return o.hit_object end\r\n       end\r\n   else\r\n       return hit[1].hit_object\r\n   end\r\n\r\n   return nil\r\nend\r\n\r\n-- move a single card of the given type left 1 space\r\nfunction moveCardLeft(deckType, from)\r\n   local to = from - 1;\r\n   local scriptingZoneName = deckType .. \"ScriptingZone\"\r\n   local fromZone = getObjectFromGUID(keys[scriptingZoneName][from])\r\n   local toZone = getObjectFromGUID(keys[scriptingZoneName][to])\r\n\r\n   local card = getObjectsByClass(fromZone, \"card\")[1]\r\n   local position = toZone.getPosition()\r\n\r\n   if card ~= nil then\r\n       card.setLock(false)\r\n       card.setPositionSmooth(position, false, false)\r\n       card.setVar(\"index\", to);\r\n       Wait.time(function() card.setLock(true) end, 1)\r\n   end\r\nend\r\n\r\n-- move all cubes left 1 space\r\nfunction moveCubesLeft(from)\r\n   local to = from - 1;\r\n   local zoneFrom = getObjectFromGUID(keys.actionCardsScriptingZone[from]);\r\n   local zoneTo = getObjectFromGUID(keys.actionCardsScriptingZone[to]);\r\n\r\n   local delta = zoneFrom.getPosition().x - zoneTo.getPosition().x\r\n\r\n   for i, obj in ipairs(zoneFrom.getObjects()) do\r\n       if isClass(obj, \"cube\") then\r\n           local position = obj.getPosition()\r\n           position.x = position.x - delta;\r\n           obj.setPositionSmooth(position, false, false)\r\n       end\r\n   end\r\nend\r\n\r\n-- return true if the object contains a 'type' var and the 'type' var contains\r\n-- the 'type' string\r\nfunction isClass(object, class)\r\n   if class == nil then return true end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if type(modelClass) ~= \"string\" then return false end\r\n\r\n   for i in string.gmatch(modelClass, \"%S+\") do\r\n      if i == class then return true end\r\n   end\r\n\r\n   return false\r\nend\r\n\r\nfunction addClass(object, className)\r\n   if object == nil then return false end\r\n   local modelClass = object.getVar(\"modelClass\")\r\n   if modelClass == nil then modelClass = \"\" end\r\n   local newModel = modelClass .. \" \" .. className\r\n   object.setVar(\"modelClass\", newModel)\r\n   return true\r\nend\r\n\r\nfunction getObjectsByClass(container, class)\r\n   if container == nil then return end\r\n   r = {}\r\n\r\n   local objects = container.getObjects()\r\n\r\n   for i, object in ipairs(objects) do\r\n       if isClass(object, class) then\r\n           table.insert(r, object)\r\n       end\r\n   end\r\n   return r\r\nend\r\n\r\n-- return true is object is in the hand of player color\r\nfunction isInHand(object, color)\r\n   local handObjects = getPlayableCards(color)   \r\n   for index, handObject in ipairs(handObjects) do\r\n       if (handObject == object) then\r\n            return true\r\n        end\r\n   end\r\n   return false\r\nend\r\n\r\n-- return action cards currently in the hand zone of player 'color'.\r\nfunction getPlayableCards(color) \r\n    r = {}\r\n\r\n    local handObjects = Player[color].getHandObjects();    \r\n\r\n    for i,card in ipairs(handObjects) do\r\n        if isClass(card, \"action\") then table.insert(r, card) end\r\n    end\r\n    return r\r\n end\r\n\r\nfunction indexOf(table, value)\r\n   for i,v in pairs(table) do\r\n       if v == value then return i end\r\n   end\r\n   return nil\r\nend\r\n\r\n-- trigger when the current action has completed\r\n-- used for bot automation\r\nfunction idle()\r\n    log(\"Idle: \" .. gameModel.currentPlayer)\r\n    if bots[gameModel.currentPlayer] == nil then return end\r\n    local bot = bots[gameModel.currentPlayer]\r\n\r\n    local startTime = os.clock()\r\n    local action = bot:getAction()\r\n    if action ~= nil then bot:doAction(action) end\r\n    log(\"Action Time :\" .. os.clock() - startTime)\r\nend\r\n\r\n-- remove a player from the game turn rotation\r\nfunction removePlayer(color)\r\n    if gameModel.currentPlayer == color then\r\n        clearActive()\r\n        endTurnCleanup()\r\n        startTurn(gameModel.nextPlayer[color])\r\n    end\r\n\r\n    local newTurns = {}\r\n    for i = 1, #gameModel.turns do\r\n        if gameModel.turns[i] ~= color then\r\n            newTurns[#newTurns + 1] = gameModel.turns[i]\r\n        end\r\n    end\r\n    gameModel.turns = newTurns;\r\n    setupTurns(#gameModel.turns)\r\nend\r\n\r\n-- remove all buttons from target that are labeled with 'label'\r\nfunction removeButtons(target, label)\r\n    if target == nil then return end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return end\r\n    if #buttons == 0 then return end\r\n\r\n    for i = #buttons, 1, -1 do\r\n        if buttons[i].label == label then\r\n            target.removeButton(i - 1)\r\n        end\r\n    end\r\nend\r\n\r\n-- return true if target object has a button with the provided label\r\nfunction hasButton(target, label)\r\n    if target == nil then return false end\r\n    local buttons = target.getButtons()\r\n    if buttons == nil then return false end\r\n    if #buttons == 0 then return false end\r\n\r\n    for i = 1, #buttons do\r\n        if buttons[i].label == label then\r\n            return true\r\n        end\r\n    end\r\n\r\n    return false\r\nend\r\n\r\n---< #include Utility\r\n\r\nstate = \"spent\"\r\n\r\nfunction onSave()\r\n    local data = {}\r\n    if owner ~= nil then data.owner = owner end\r\n    if index ~= nil then data.index = index end\r\n    if ready ~= nil then data.ready = ready end\r\n    if state ~= nil then data.state = state end\r\n    if count ~= nil then data.count = count end\r\n    return JSON.encode(data)\r\nend\r\n\r\nfunction onLoad(json)\r\n    if json == \"\" or json == nil then return end\r\n    local data = JSON.decode(json)\r\n    if data.owner ~= nil then owner = data.owner end\r\n    if data.index ~= nil then index = data.index end\r\n    if data.ready ~= nil then ready = data.ready end\r\n    if data.state ~= nil then state = data.state end\r\n    if data.count ~= nil then count = data.count end\r\nend\r\n  \r\nfunction onCollisionEnter(collisionInfo)\r\n    log(\"collision \" .. self.getGUID())\r\n    log(owner)\r\n    if owner == nil then return end\r\n    local isInHand = isInHand(self, owner)\r\n    local gameModel = Global.getTable(\"gameModel\")\r\n    \r\n    if gameModel.active.guid ~= \"\" then return end -- is another action card currently in play?\r\n\r\n    if isInHand == false and state ~= \"spent\" and color == gameModel.currentPlayer then\r\n        console.log(\"play card\")\r\n        setupContextMenu(card) -- provided including files\r\n        setActive() -- provided in including files, set this as active card in game model\r\n    elseif isInHand == true then\r\n        resetState() -- provided in including files\r\n    end\r\nend\r\n\r\n---< #include ActionCard\r\n\r\nmodelClass = \"card action promote\"\r\n\r\nfunction resetState()\r\n    state = \"ready\";\r\n    count = startingCount;\r\nend\r\n\r\nfunction setupContextMenu()\r\n    self.clearContextMenu()\r\n    self.addContextMenuItem(\"Yellow -> Red\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"yellow\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Red -> Green\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"red\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\n\r\n    self.addContextMenuItem(\"Green -> Brown\", function(playerColor)\r\n        local cubes = getPlayerCubes(owner)\r\n        local cube = cubes:getCube(\"green\")\r\n        quickPromote(CubeCollection:new(cube), playerColor)\r\n    end)\r\nend\r\n\r\n-- set the last card played\r\n-- updates the game model for other methods to poll\r\nfunction setActive()\r\n    local gameModel = Global.getTable(\"gameModel\");\r\n    gameModel.active.guid = self.getGUID()\r\n    gameModel.active.action = \"promote\"\r\n    gameModel.active.value = startingCount -- provided in including files\r\n    Global.setTable(\"gameModel\", gameModel);\r\nend\r\n---< #include ActionCardPromote\r\ncount = 2;\r\nstartingCount = 2;\r\n\r\n\r\n",
      "LuaScriptState": "{\"count\":2,\"owner\":\"Red\",\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "3676e6",
      "Name": "Card",
      "Transform": {
        "posX": -14.6418953,
        "posY": 3.074822,
        "posZ": 34.43159,
        "rotX": 2.04337987E-08,
        "rotY": 180.0,
        "rotZ": -1.33660464E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 544,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "{\"count\":2,\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "874bd4",
      "Name": "Card",
      "Transform": {
        "posX": -19.3581047,
        "posY": 2.974822,
        "posZ": 34.43159,
        "rotX": 1.26843247E-09,
        "rotY": 180.0,
        "rotZ": -2.0054253E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 543,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "{\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "930e39",
      "Name": "Card",
      "Transform": {
        "posX": 19.3581047,
        "posY": 3.074822,
        "posZ": 34.4527626,
        "rotX": 3.614032E-10,
        "rotY": 180.0,
        "rotZ": -1.263371E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 544,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "{\"count\":2,\"ready\":true,\"state\":\"spent\"}",
      "XmlUI": ""
    },
    {
      "GUID": "4d5f89",
      "Name": "Card",
      "Transform": {
        "posX": 14.6418953,
        "posY": 2.974822,
        "posZ": 34.4527626,
        "rotX": 1.71243872E-08,
        "rotY": 180.0,
        "rotZ": -1.25533518E-07,
        "scaleX": 2.2,
        "scaleY": 1.0,
        "scaleZ": 2.2
      },
      "Nickname": "Action Card",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": true,
      "CardID": 543,
      "SidewaysCard": false,
      "CustomDeck": {
        "5": {
          "FaceURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664908575/6EF6B84B51FD52D1FEE29FEDDA716478ECD559F2/",
          "BackURL": "http://cloud-3.steamusercontent.com/ugc/1470940209664910449/2E7A6456540172FD5A42927FE7D0C320D9AE4832/",
          "NumWidth": 9,
          "NumHeight": 5,
          "BackIsHidden": true,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "{\"ready\":true}",
      "XmlUI": ""
    }
  ]
}